{"version":3,"file":"bundle.js","sources":["../src/index.ts"],"sourcesContent":["export class GQuery {\r\n  spreadsheetId: string;\r\n\r\n  constructor(spreadsheetId?: string) {\r\n    this.spreadsheetId = spreadsheetId\r\n      ? spreadsheetId\r\n      : SpreadsheetApp.getActiveSpreadsheet().getId();\r\n  }\r\n\r\n  from(sheetName: string): GQueryTable {\r\n    return new GQueryTable(this.spreadsheetId, sheetName);\r\n  }\r\n\r\n  getMany(\r\n    sheetNames: string[],\r\n    options?: GQueryReadOptions\r\n  ): {\r\n    [sheetName: string]: GQueryResult;\r\n  } {\r\n    if (!sheetNames || sheetNames.length === 0) {\r\n      return {};\r\n    }\r\n\r\n    // Set default options if not provided\r\n    const valueRenderOption =\r\n      options?.valueRenderOption || ValueRenderOption.FORMATTED_VALUE;\r\n    const dateTimeRenderOption =\r\n      options?.dateTimeRenderOption || DateTimeRenderOption.FORMATTED_STRING;\r\n\r\n    // Use Sheets API to batch get the data\r\n    const response = Sheets.Spreadsheets.Values.batchGet(this.spreadsheetId, {\r\n      ranges: sheetNames,\r\n      valueRenderOption: valueRenderOption,\r\n      dateTimeRenderOption: dateTimeRenderOption,\r\n    });\r\n\r\n    const result: { [sheetName: string]: GQueryResult } = {};\r\n\r\n    if (!response || !response.valueRanges) {\r\n      return result;\r\n    }\r\n\r\n    // Process each returned value range\r\n    response.valueRanges.forEach((valueRange, index) => {\r\n      const sheetName = sheetNames[index];\r\n\r\n      if (!valueRange.values || valueRange.values.length === 0) {\r\n        // Handle empty sheet\r\n        result[sheetName] = { headers: [], rows: [] };\r\n        return;\r\n      }\r\n\r\n      // First row contains headers\r\n      const headers = valueRange.values[0].map((header) => String(header));\r\n      const rows: GQueryRow[] = [];\r\n\r\n      // Process data rows (starting from index 1 to skip headers)\r\n      for (let i = 1; i < valueRange.values.length; i++) {\r\n        const rowData = valueRange.values[i];\r\n        const row: GQueryRow = {\r\n          __meta: {\r\n            rowNum: i + 1, // 1-based row number (+1 because we're starting from index 1)\r\n            colLength: rowData.length,\r\n          },\r\n        };\r\n\r\n        // Map each column value to its corresponding header\r\n        for (let j = 0; j < headers.length; j++) {\r\n          const header = headers[j];\r\n          row[header] = j < rowData.length ? rowData[j] : null;\r\n        }\r\n\r\n        rows.push(row);\r\n      }\r\n\r\n      result[sheetName] = { headers, rows };\r\n    });\r\n\r\n    return result;\r\n  }\r\n}\r\n/**\r\n * Idea end result:\r\n * user calls from(\"Sheet1\")\r\n * if user calls .select([\"Id\", \"Name\"]) -- only return Id Name columns after read() is called\r\n * if user calls .filter((row) => row.Id === 1) -- only return rows where Id === 1 after read() is called\r\n * if user calls .join(\"Models\", \"Model\", \"Model_Name\") -- join Models sheet on Model_Name (Models sheet) and Model (current sheet)\r\n * once read() is called, it will return the result of the query\r\n */\r\nexport class GQueryTable {\r\n  spreadsheetId: string;\r\n  spreadsheet: GoogleAppsScript.Spreadsheet.Spreadsheet;\r\n  sheetName: string;\r\n  sheet: GoogleAppsScript.Spreadsheet.Sheet;\r\n\r\n  constructor(spreadsheetId: string, sheetName: string) {\r\n    this.spreadsheetId = spreadsheetId;\r\n    this.sheetName = sheetName;\r\n    this.spreadsheet = SpreadsheetApp.openById(spreadsheetId);\r\n    this.sheet = this.spreadsheet.getSheetByName(sheetName);\r\n  }\r\n\r\n  select(headers: string[]): GQueryTableFactory {\r\n    return new GQueryTableFactory(this).select(headers);\r\n  }\r\n\r\n  where(filterFn: (row: any) => boolean): GQueryTableFactory {\r\n    return new GQueryTableFactory(this).where(filterFn);\r\n  }\r\n\r\n  join(\r\n    sheetName: string,\r\n    sheetColumn: string,\r\n    joinColumn: string,\r\n    columnsToReturn?: string[]\r\n  ): GQueryTableFactory {\r\n    return new GQueryTableFactory(this).join(\r\n      sheetName,\r\n      sheetColumn,\r\n      joinColumn,\r\n      columnsToReturn\r\n    );\r\n  }\r\n\r\n  read(): GQueryResult {\r\n    return new GQueryTableFactory(this).get();\r\n  }\r\n}\r\n\r\nclass GQueryTableFactory {\r\n  gQueryTable: GQueryTable;\r\n  selectOption?: string[];\r\n  filterOption?: (row: any) => boolean;\r\n  joinOption: {\r\n    sheetName: string;\r\n    sheetColumn: string;\r\n    joinColumn: string;\r\n    columnsToReturn?: string[];\r\n  }[] = [];\r\n\r\n  constructor(GQueryTable: GQueryTable) {\r\n    this.gQueryTable = GQueryTable;\r\n  }\r\n\r\n  select(headers: string[]): GQueryTableFactory {\r\n    this.selectOption = headers;\r\n    return this;\r\n  }\r\n\r\n  where(filterFn: (row: any) => boolean): GQueryTableFactory {\r\n    this.filterOption = filterFn;\r\n    return this;\r\n  }\r\n\r\n  join(\r\n    sheetName: string,\r\n    sheetColumn: string,\r\n    joinColumn: string,\r\n    columnsToReturn?: string[]\r\n  ): GQueryTableFactory {\r\n    this.joinOption.push({\r\n      sheetName,\r\n      sheetColumn,\r\n      joinColumn,\r\n      columnsToReturn,\r\n    });\r\n    return this;\r\n  }\r\n\r\n  get(): GQueryResult {\r\n    // Get a new GQuery instance to use the readMany method\r\n    const gquery = new GQuery(this.gQueryTable.spreadsheetId);\r\n\r\n    // Determine which sheets we need to read from\r\n    const sheetsToRead = [this.gQueryTable.sheetName];\r\n\r\n    // Add all join sheets\r\n    if (this.joinOption.length > 0) {\r\n      this.joinOption.forEach((join) => {\r\n        if (!sheetsToRead.includes(join.sheetName)) {\r\n          sheetsToRead.push(join.sheetName);\r\n        }\r\n      });\r\n    }\r\n\r\n    // Read data from all required sheets at once\r\n    const results = gquery.getMany(sheetsToRead);\r\n\r\n    // If the main sheet doesn't exist or has no data\r\n    if (\r\n      !results[this.gQueryTable.sheetName] ||\r\n      results[this.gQueryTable.sheetName].rows.length === 0\r\n    ) {\r\n      return { headers: [], rows: [] };\r\n    }\r\n\r\n    // Get data for the primary table\r\n    let result = results[this.gQueryTable.sheetName];\r\n    let rows = result.rows;\r\n    let headers = result.headers;\r\n\r\n    // Process each join sequentially\r\n    if (this.joinOption.length > 0) {\r\n      this.joinOption.forEach((joinConfig) => {\r\n        const { sheetName, sheetColumn, joinColumn, columnsToReturn } =\r\n          joinConfig;\r\n\r\n        const joinData = results[sheetName];\r\n\r\n        if (!joinData || !joinData.rows || joinData.rows.length === 0) {\r\n          return; // Skip this join\r\n        }\r\n\r\n        // Create join lookup table\r\n        const joinMap: Record<string, any[]> = {};\r\n\r\n        // Check if the join column exists in the join table\r\n        const joinHeaders = joinData.headers;\r\n        if (!joinHeaders.includes(sheetColumn)) {\r\n          return; // Skip this join\r\n        }\r\n\r\n        joinData.rows.forEach((joinRow) => {\r\n          const joinKey = String(joinRow[sheetColumn]);\r\n          if (!joinMap[joinKey]) {\r\n            joinMap[joinKey] = [];\r\n          }\r\n          joinMap[joinKey].push(joinRow);\r\n        });\r\n\r\n        // Perform the join operation\r\n        rows = rows.map((row) => {\r\n          const localJoinValue = row[joinColumn];\r\n          const joinedRows = joinMap[String(localJoinValue)] || [];\r\n\r\n          // Create joined row with all join table fields\r\n          const joinedRow = { ...row };\r\n\r\n          joinedRows.forEach((joinRow, index) => {\r\n            // Determine which columns to include from join\r\n            const columnsToInclude =\r\n              columnsToReturn ||\r\n              Object.keys(joinRow).filter(\r\n                (key) => key !== \"__meta\" && key !== sheetColumn\r\n              );\r\n\r\n            columnsToInclude.forEach((key) => {\r\n              if (joinRow.hasOwnProperty(key) && key !== \"__meta\") {\r\n                // For multiple joined rows, add suffix _1, _2, etc.\r\n                const suffix = joinedRows.length > 1 ? `_${index + 1}` : \"\";\r\n                const targetKey = key === sheetColumn ? key : `${key}${suffix}`;\r\n                joinedRow[targetKey] = joinRow[key];\r\n              }\r\n            });\r\n          });\r\n\r\n          return joinedRow;\r\n        });\r\n      });\r\n    }\r\n\r\n    // Apply filter if specified\r\n    if (this.filterOption) {\r\n      rows = rows.filter(this.filterOption);\r\n    }\r\n\r\n    // Apply select if specified\r\n    if (this.selectOption && this.selectOption.length > 0) {\r\n      // Create a map to track columns from joined tables\r\n      const joinedColumns = new Set<string>();\r\n\r\n      // Collect all columns from joined tables\r\n      rows.forEach((row) => {\r\n        Object.keys(row).forEach((key) => {\r\n          // If the column is not in the original headers, it's from a join\r\n          if (!headers.includes(key) && key !== \"__meta\") {\r\n            joinedColumns.add(key);\r\n          }\r\n        });\r\n      });\r\n\r\n      // If we have a select option, determine which columns to keep\r\n      let selectedHeaders: string[];\r\n\r\n      // Check if any of the selected headers is \"Model\" or \"Model_Name\"\r\n      // If we're selecting the join columns, we want to include all related joined fields\r\n      if (\r\n        this.selectOption.some(\r\n          (header) =>\r\n            header === \"Model\" ||\r\n            header === \"Model_Name\" ||\r\n            this.joinOption.some(\r\n              (j) => j.joinColumn === header || j.sheetColumn === header\r\n            )\r\n        )\r\n      ) {\r\n        // Include all join-related columns and the selected columns\r\n        selectedHeaders = [...this.selectOption];\r\n        joinedColumns.forEach((joinCol) => {\r\n          selectedHeaders.push(joinCol);\r\n        });\r\n      } else {\r\n        // Otherwise only include explicitly selected columns\r\n        selectedHeaders = [...this.selectOption];\r\n      }\r\n\r\n      // Remove duplicates\r\n      selectedHeaders = [...new Set(selectedHeaders)];\r\n\r\n      // Filter rows to only include selected columns\r\n      rows = rows.map((row) => {\r\n        const selectedRow: GQueryRow = {\r\n          __meta: row.__meta,\r\n        };\r\n\r\n        selectedHeaders.forEach((header) => {\r\n          if (row.hasOwnProperty(header)) {\r\n            selectedRow[header] = row[header];\r\n          }\r\n        });\r\n\r\n        return selectedRow;\r\n      });\r\n\r\n      // Update headers to include both selected and joined columns\r\n      return {\r\n        headers: selectedHeaders,\r\n        rows,\r\n      };\r\n    }\r\n\r\n    return {\r\n      headers,\r\n      rows,\r\n    };\r\n  }\r\n}\r\n\r\nexport type GQueryReadOptions = {\r\n  valueRenderOption?: ValueRenderOption;\r\n  dateTimeRenderOption?: DateTimeRenderOption;\r\n};\r\nexport type GQueryResult = {\r\n  rows: GQueryRow[];\r\n  headers: string[];\r\n};\r\nexport type GQueryRow = Record<string, any> & {\r\n  __meta: {\r\n    rowNum: number;\r\n    colLength: number;\r\n  };\r\n};\r\nexport enum ValueRenderOption {\r\n  FORMATTED_VALUE = \"FORMATTED_VALUE\",\r\n  UNFORMATTED_VALUE = \"UNFORMATTED_VALUE\",\r\n  FORMULA = \"FORMULA\",\r\n}\r\nexport enum DateTimeRenderOption {\r\n  FORMATTED_STRING = \"FORMATTED_STRING\",\r\n  SERIAL_NUMBER = \"SERIAL_NUMBER\",\r\n}\r\n"],"names":[],"mappings":"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"}