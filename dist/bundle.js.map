{"version":3,"file":"bundle.js","sources":["../src/get.ts","../src/update.ts","../src/append.ts","../src/index.ts"],"sourcesContent":["import {\r\n  DateTimeRenderOption,\r\n  GQuery,\r\n  GQueryReadOptions,\r\n  GQueryResult,\r\n  GQueryRow,\r\n  GQueryTable,\r\n  GQueryTableFactory,\r\n  ValueRenderOption,\r\n} from \"./index\";\r\n\r\nexport function getManyInternal(\r\n  gquery: GQuery,\r\n  sheetNames: string[],\r\n  options?: GQueryReadOptions\r\n): {\r\n  [sheetName: string]: GQueryResult;\r\n} {\r\n  if (!sheetNames || sheetNames.length === 0) {\r\n    return {};\r\n  }\r\n\r\n  // Set default options if not provided\r\n  const valueRenderOption =\r\n    options?.valueRenderOption || ValueRenderOption.FORMATTED_VALUE;\r\n  const dateTimeRenderOption =\r\n    options?.dateTimeRenderOption || DateTimeRenderOption.FORMATTED_STRING;\r\n\r\n  // Use Sheets API to batch get the data\r\n  const response = Sheets.Spreadsheets.Values.batchGet(gquery.spreadsheetId, {\r\n    ranges: sheetNames,\r\n    valueRenderOption: valueRenderOption,\r\n    dateTimeRenderOption: dateTimeRenderOption,\r\n  });\r\n\r\n  const result: { [sheetName: string]: GQueryResult } = {};\r\n\r\n  if (!response || !response.valueRanges) {\r\n    return result;\r\n  }\r\n\r\n  // Process each returned value range\r\n  response.valueRanges.forEach((valueRange, index) => {\r\n    const sheetName = sheetNames[index];\r\n\r\n    if (!valueRange.values || valueRange.values.length === 0) {\r\n      // Handle empty sheet\r\n      result[sheetName] = { headers: [], rows: [] };\r\n      return;\r\n    }\r\n\r\n    // First row contains headers\r\n    const headers = valueRange.values[0].map((header) => String(header));\r\n    const rows: GQueryRow[] = [];\r\n\r\n    // Process data rows (starting from index 1 to skip headers)\r\n    for (let i = 1; i < valueRange.values.length; i++) {\r\n      const rowData = valueRange.values[i];\r\n      const row: GQueryRow = {\r\n        __meta: {\r\n          rowNum: i + 1, // 1-based row number (+1 because we're starting from index 1)\r\n          colLength: rowData.length,\r\n        },\r\n      };\r\n\r\n      // Map each column value to its corresponding header\r\n      for (let j = 0; j < headers.length; j++) {\r\n        const header = headers[j];\r\n        row[header] = j < rowData.length ? rowData[j] : null;\r\n      }\r\n\r\n      rows.push(row);\r\n    }\r\n\r\n    result[sheetName] = { headers, rows };\r\n  });\r\n\r\n  return result;\r\n}\r\n\r\nexport function getInternal(\r\n  gqueryTableFactory: GQueryTableFactory\r\n): GQueryResult {\r\n  const gqueryTable = gqueryTableFactory.gQueryTable;\r\n  const gquery = gqueryTable.gquery;\r\n  // Determine which sheets we need to read from\r\n  const sheetsToRead = [gqueryTable.sheetName];\r\n\r\n  // Add all join sheets\r\n  if (gqueryTableFactory.joinOption.length > 0) {\r\n    gqueryTableFactory.joinOption.forEach((join) => {\r\n      if (!sheetsToRead.includes(join.sheetName)) {\r\n        sheetsToRead.push(join.sheetName);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Read data from all required sheets at once\r\n  const results = gquery.getMany(sheetsToRead);\r\n\r\n  // If the main sheet doesn't exist or has no data\r\n  if (\r\n    !results[gqueryTable.sheetName] ||\r\n    results[gqueryTable.sheetName].rows.length === 0\r\n  ) {\r\n    return { headers: [], rows: [] };\r\n  }\r\n\r\n  // Get data for the primary table\r\n  let result = results[gqueryTable.sheetName];\r\n  let rows = result.rows;\r\n  let headers = result.headers;\r\n\r\n  // Process each join sequentially\r\n  if (gqueryTableFactory.joinOption.length > 0) {\r\n    gqueryTableFactory.joinOption.forEach((joinConfig) => {\r\n      const { sheetName, sheetColumn, joinColumn, columnsToReturn } =\r\n        joinConfig;\r\n\r\n      const joinData = results[sheetName];\r\n\r\n      if (!joinData || !joinData.rows || joinData.rows.length === 0) {\r\n        return; // Skip this join\r\n      }\r\n\r\n      // Create join lookup table\r\n      const joinMap: Record<string, any[]> = {};\r\n\r\n      // Check if the join column exists in the join table\r\n      const joinHeaders = joinData.headers;\r\n      if (!joinHeaders.includes(sheetColumn)) {\r\n        return; // Skip this join\r\n      }\r\n\r\n      joinData.rows.forEach((joinRow) => {\r\n        const joinKey = String(joinRow[sheetColumn]);\r\n        if (!joinMap[joinKey]) {\r\n          joinMap[joinKey] = [];\r\n        }\r\n        joinMap[joinKey].push(joinRow);\r\n      });\r\n\r\n      // Perform the join operation\r\n      rows = rows.map((row) => {\r\n        const localJoinValue = row[joinColumn];\r\n        const joinedRows = joinMap[String(localJoinValue)] || [];\r\n\r\n        // Create joined row with all join table fields\r\n        const joinedRow = { ...row };\r\n\r\n        joinedRows.forEach((joinRow, index) => {\r\n          // Determine which columns to include from join\r\n          const columnsToInclude =\r\n            columnsToReturn ||\r\n            Object.keys(joinRow).filter(\r\n              (key) => key !== \"__meta\" && key !== sheetColumn\r\n            );\r\n\r\n          columnsToInclude.forEach((key) => {\r\n            if (joinRow.hasOwnProperty(key) && key !== \"__meta\") {\r\n              // For multiple joined rows, add suffix _1, _2, etc.\r\n              const suffix = joinedRows.length > 1 ? `_${index + 1}` : \"\";\r\n              const targetKey = key === sheetColumn ? key : `${key}${suffix}`;\r\n              joinedRow[targetKey] = joinRow[key];\r\n            }\r\n          });\r\n        });\r\n\r\n        return joinedRow;\r\n      });\r\n    });\r\n  }\r\n\r\n  // Apply filter if specified\r\n  if (gqueryTableFactory.filterOption) {\r\n    rows = rows.filter(gqueryTableFactory.filterOption);\r\n  }\r\n\r\n  // Apply select if specified\r\n  if (\r\n    gqueryTableFactory.selectOption &&\r\n    gqueryTableFactory.selectOption.length > 0\r\n  ) {\r\n    // Create a map to track columns from joined tables\r\n    const joinedColumns = new Set<string>();\r\n\r\n    // Collect all columns from joined tables\r\n    rows.forEach((row) => {\r\n      Object.keys(row).forEach((key) => {\r\n        // If the column is not in the original headers, it's from a join\r\n        if (!headers.includes(key) && key !== \"__meta\") {\r\n          joinedColumns.add(key);\r\n        }\r\n      });\r\n    });\r\n\r\n    // If we have a select option, determine which columns to keep\r\n    let selectedHeaders: string[];\r\n\r\n    // Check if any of the selected headers is \"Model\" or \"Model_Name\"\r\n    // If we're selecting the join columns, we want to include all related joined fields\r\n    if (\r\n      gqueryTableFactory.selectOption.some(\r\n        (header) =>\r\n          header === \"Model\" ||\r\n          header === \"Model_Name\" ||\r\n          gqueryTableFactory.joinOption.some(\r\n            (j) => j.joinColumn === header || j.sheetColumn === header\r\n          )\r\n      )\r\n    ) {\r\n      // Include all join-related columns and the selected columns\r\n      selectedHeaders = [...gqueryTableFactory.selectOption];\r\n      joinedColumns.forEach((joinCol) => {\r\n        selectedHeaders.push(joinCol);\r\n      });\r\n    } else {\r\n      // Otherwise only include explicitly selected columns\r\n      selectedHeaders = [...gqueryTableFactory.selectOption];\r\n    }\r\n\r\n    // Remove duplicates\r\n    selectedHeaders = [...new Set(selectedHeaders)];\r\n\r\n    // Filter rows to only include selected columns\r\n    rows = rows.map((row) => {\r\n      const selectedRow: GQueryRow = {\r\n        __meta: row.__meta,\r\n      };\r\n\r\n      selectedHeaders.forEach((header) => {\r\n        if (row.hasOwnProperty(header)) {\r\n          selectedRow[header] = row[header];\r\n        }\r\n      });\r\n\r\n      return selectedRow;\r\n    });\r\n\r\n    // Update headers to include both selected and joined columns\r\n    return {\r\n      headers: selectedHeaders,\r\n      rows,\r\n    };\r\n  }\r\n\r\n  return {\r\n    headers,\r\n    rows,\r\n  };\r\n}\r\n","import { GQueryResult, GQueryTableFactory, GQueryRow } from \"./index\";\r\n\r\nexport function updateInternal(\r\n  gQueryTableFactory: GQueryTableFactory,\r\n  updateFn: (row: Record<string, any>) => Record<string, any>\r\n): GQueryResult {\r\n  // Get table configuration\r\n  const spreadsheetId = gQueryTableFactory.gQueryTable.spreadsheetId;\r\n  const sheetName = gQueryTableFactory.gQueryTable.sheetName;\r\n  const range = sheetName;\r\n\r\n  // Fetch current data from the sheet\r\n  const response = Sheets.Spreadsheets.Values.get(spreadsheetId, range);\r\n  const values = response.values || [];\r\n\r\n  if (values.length === 0) {\r\n    return { rows: [], headers: [] };\r\n  }\r\n\r\n  // Extract headers and rows\r\n  const headers = values[0];\r\n  const rows = values.slice(1).map((row) => {\r\n    const obj: Record<string, any> = {};\r\n    headers.forEach((header: string, i: number) => {\r\n      // Ensure all properties are initialized, even if empty\r\n      obj[header] = row[i] !== undefined ? row[i] : \"\";\r\n    });\r\n    return obj;\r\n  });\r\n\r\n  // Filter rows if where function is provided\r\n  let filteredRows = [];\r\n  if (gQueryTableFactory.filterOption) {\r\n    try {\r\n      filteredRows = rows.filter((row) => {\r\n        try {\r\n          return gQueryTableFactory.filterOption(row);\r\n        } catch (error) {\r\n          console.error(\"Error filtering row:\", error);\r\n          return false;\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error in filter function:\", error);\r\n      return { rows: [], headers };\r\n    }\r\n  } else {\r\n    filteredRows = rows;\r\n  }\r\n\r\n  // Update filtered rows\r\n  const updatedRows = filteredRows.map((row) => {\r\n    // Apply the update function to get the updated row values\r\n    const updatedRow = { ...row };\r\n    try {\r\n      const result = updateFn(updatedRow);\r\n      // Handle both return value updates and direct modifications\r\n      Object.assign(updatedRow, result);\r\n    } catch (error) {\r\n      console.error(\"Error updating row:\", error);\r\n    }\r\n\r\n    // Find the index of this row in the original data array\r\n    const rowIndex = rows.findIndex((origRow) =>\r\n      Object.keys(origRow).every((key) => origRow[key] === row[key])\r\n    );\r\n\r\n    // Add __meta to each row with required properties\r\n    if (rowIndex !== -1) {\r\n      updatedRow.__meta = {\r\n        rowNum: rowIndex + 2, // +2 because we have headers at index 0 and row index is 0-based\r\n        colLength: headers.length,\r\n      };\r\n    }\r\n\r\n    return updatedRow;\r\n  });\r\n\r\n  // Track changes to optimize updates\r\n  const changedCells = new Map<string, any[]>();\r\n\r\n  // For each updated row, determine which cells changed\r\n  updatedRows.forEach((updatedRow) => {\r\n    if (!updatedRow.__meta) return;\r\n\r\n    const rowIndex = updatedRow.__meta.rowNum - 2;\r\n    const originalRow = rows[rowIndex];\r\n\r\n    headers.forEach((header, columnIndex) => {\r\n      // Skip if values are the same\r\n      if (originalRow[header] === updatedRow[header]) return;\r\n\r\n      // Use A1 notation for the column (A, B, C, etc.)\r\n      const columnLetter = getColumnLetter(columnIndex);\r\n      const cellRange = `${sheetName}!${columnLetter}${updatedRow.__meta.rowNum}`;\r\n\r\n      // Store the change\r\n      changedCells.set(cellRange, [[updatedRow[header] || \"\"]]);\r\n    });\r\n  });\r\n\r\n  // Only update if we have changes\r\n  if (changedCells.size > 0) {\r\n    // Group adjacent cells in the same column for more efficient updates\r\n    const optimizedUpdates = optimizeRanges(changedCells);\r\n\r\n    // Send updates to Google Sheets\r\n    for (const [range, values] of Object.entries(optimizedUpdates)) {\r\n      Sheets.Spreadsheets.Values.update({ values }, spreadsheetId, range, {\r\n        valueInputOption: \"USER_ENTERED\",\r\n      });\r\n    }\r\n  }\r\n\r\n  // If updates were made, properly return the filtered and updated rows\r\n  // Make a fresh copy of the returned rows to ensure they have proper structure\r\n  const resultRows =\r\n    filteredRows.length > 0\r\n      ? updatedRows.map((row) => {\r\n          const resultRow: GQueryRow = { __meta: row.__meta };\r\n          headers.forEach((header) => {\r\n            resultRow[header] = row[header];\r\n          });\r\n          return resultRow;\r\n        })\r\n      : [];\r\n\r\n  // Return the updated rows\r\n  return {\r\n    rows: resultRows as GQueryRow[],\r\n    headers: headers,\r\n  };\r\n}\r\n\r\n/**\r\n * Convert column index to column letter (0 -> A, 1 -> B, etc.)\r\n */\r\nfunction getColumnLetter(columnIndex: number): string {\r\n  let columnLetter = \"\";\r\n  let index = columnIndex;\r\n\r\n  while (index >= 0) {\r\n    columnLetter = String.fromCharCode(65 + (index % 26)) + columnLetter;\r\n    index = Math.floor(index / 26) - 1;\r\n  }\r\n\r\n  return columnLetter;\r\n}\r\n\r\n/**\r\n * Optimize update ranges by combining adjacent cells in the same column\r\n */\r\nfunction optimizeRanges(changedCells: Map<string, any[]>): {\r\n  [range: string]: any[][];\r\n} {\r\n  // Group cells by column\r\n  const columnGroups = new Map<string, Map<number, any>>();\r\n\r\n  for (const [cellRange, value] of changedCells.entries()) {\r\n    // Extract column letter and row number from A1 notation\r\n    const matches = cellRange.match(/([^!]+)!([A-Z]+)(\\d+)$/);\r\n    if (!matches) continue;\r\n\r\n    const sheet = matches[1];\r\n    const columnLetter = matches[2];\r\n    const rowNumber = parseInt(matches[3]);\r\n    const columnKey = `${sheet}!${columnLetter}`;\r\n\r\n    if (!columnGroups.has(columnKey)) {\r\n      columnGroups.set(columnKey, new Map());\r\n    }\r\n\r\n    columnGroups.get(columnKey).set(rowNumber, value[0][0]);\r\n  }\r\n\r\n  // Create optimized ranges\r\n  const optimizedUpdates: { [range: string]: any[][] } = {};\r\n\r\n  for (const [columnKey, rowsMap] of columnGroups.entries()) {\r\n    // Sort row numbers\r\n    const rowNumbers = Array.from(rowsMap.keys()).sort((a, b) => a - b);\r\n\r\n    if (rowNumbers.length === 0) continue;\r\n\r\n    // Instead of finding continuous ranges, just find min and max to create one range per column\r\n    const minRow = Math.min(...rowNumbers);\r\n    const maxRow = Math.max(...rowNumbers);\r\n\r\n    // Extract sheet name and column from columnKey\r\n    const sheet = columnKey.split(\"!\")[0];\r\n    const column = columnKey.split(\"!\")[1];\r\n\r\n    // Create a single range from min to max row\r\n    const rangeKey = `${sheet}!${column}${minRow}:${column}${maxRow}`;\r\n\r\n    // Create array of values with proper ordering\r\n    const values = [];\r\n    for (let row = minRow; row <= maxRow; row++) {\r\n      // Use the updated value if it exists, otherwise use empty string to preserve the existing value\r\n      const value = rowsMap.has(row) ? rowsMap.get(row) : \"\";\r\n      values.push([value]);\r\n    }\r\n\r\n    optimizedUpdates[rangeKey] = values;\r\n  }\r\n\r\n  return optimizedUpdates;\r\n}\r\n","import { GQueryResult, GQueryTable, GQueryRow } from \"./index\";\r\n\r\nexport function appendInternal(\r\n  table: GQueryTable,\r\n  data: { [key: string]: any }[]\r\n): GQueryResult {\r\n  // If no data is provided or empty array, return empty result\r\n  if (!data || data.length === 0) {\r\n    return { rows: [], headers: [] };\r\n  }\r\n\r\n  // Extract spreadsheet information\r\n  const spreadsheetId = table.spreadsheetId;\r\n  const sheetName = table.sheetName;\r\n\r\n  // First, get the current headers from the sheet\r\n  const response = Sheets.Spreadsheets.Values.get(\r\n    spreadsheetId,\r\n    `${sheetName}!1:1`\r\n  );\r\n\r\n  // If sheet is empty or doesn't exist, cannot append\r\n  if (!response || !response.values || response.values.length === 0) {\r\n    throw new Error(`Sheet \"${sheetName}\" not found or has no headers`);\r\n  }\r\n\r\n  const headers = response.values[0].map((header) => String(header));\r\n\r\n  // Format data to be appended according to the sheet's headers\r\n  const rowsToAppend = data.map((item) => {\r\n    // For each header, get corresponding value from item or empty string\r\n    return headers.map((header) => {\r\n      return item[header] !== undefined ? item[header] : \"\";\r\n    });\r\n  });\r\n\r\n  // Use Sheets API to append the data\r\n  const appendResponse = Sheets.Spreadsheets.Values.append(\r\n    { values: rowsToAppend },\r\n    spreadsheetId,\r\n    `${sheetName}`,\r\n    {\r\n      valueInputOption: \"USER_ENTERED\",\r\n      insertDataOption: \"INSERT_ROWS\",\r\n    }\r\n  );\r\n\r\n  // Check if append was successful\r\n  if (\r\n    !appendResponse ||\r\n    !appendResponse.updates ||\r\n    !appendResponse.updates.updatedRange\r\n  ) {\r\n    throw new Error(\"Failed to append data to sheet\");\r\n  }\r\n\r\n  // Extract information about the appended rows\r\n  const updatedRange = appendResponse.updates.updatedRange;\r\n  const rangeMatch = updatedRange.match(/([^!]+)!([A-Z]+)(\\d+):([A-Z]+)(\\d+)/);\r\n\r\n  if (!rangeMatch) {\r\n    throw new Error(`Could not parse updated range: ${updatedRange}`);\r\n  }\r\n\r\n  // Get start and end row numbers from the updated range\r\n  const startRow = parseInt(rangeMatch[3]);\r\n  const endRow = parseInt(rangeMatch[5]);\r\n\r\n  // Create result rows with metadata\r\n  const resultRows: GQueryRow[] = rowsToAppend.map((row, index) => {\r\n    const rowObj: GQueryRow = {\r\n      __meta: {\r\n        rowNum: startRow + index,\r\n        colLength: headers.length,\r\n      },\r\n    };\r\n\r\n    // Add data according to headers\r\n    headers.forEach((header, colIndex) => {\r\n      rowObj[header] = row[colIndex];\r\n    });\r\n\r\n    return rowObj;\r\n  });\r\n\r\n  return {\r\n    rows: resultRows,\r\n    headers: headers,\r\n  };\r\n}\r\n","import { getInternal, getManyInternal } from \"./get\";\r\nimport { updateInternal } from \"./update\";\r\nimport { appendInternal } from \"./append\";\r\n\r\nexport class GQuery {\r\n  spreadsheetId: string;\r\n\r\n  constructor(spreadsheetId?: string) {\r\n    this.spreadsheetId = spreadsheetId\r\n      ? spreadsheetId\r\n      : SpreadsheetApp.getActiveSpreadsheet().getId();\r\n  }\r\n\r\n  from(sheetName: string): GQueryTable {\r\n    return new GQueryTable(this, this.spreadsheetId, sheetName);\r\n  }\r\n\r\n  getMany(\r\n    sheetNames: string[],\r\n    options?: GQueryReadOptions\r\n  ): {\r\n    [sheetName: string]: GQueryResult;\r\n  } {\r\n    return getManyInternal(this, sheetNames, options);\r\n  }\r\n}\r\n\r\nexport class GQueryTable {\r\n  gquery: GQuery;\r\n  spreadsheetId: string;\r\n  spreadsheet: GoogleAppsScript.Spreadsheet.Spreadsheet;\r\n  sheetName: string;\r\n  sheet: GoogleAppsScript.Spreadsheet.Sheet;\r\n\r\n  constructor(gquery: GQuery, spreadsheetId: string, sheetName: string) {\r\n    this.spreadsheetId = spreadsheetId;\r\n    this.sheetName = sheetName;\r\n    this.spreadsheet = SpreadsheetApp.openById(spreadsheetId);\r\n    this.sheet = this.spreadsheet.getSheetByName(sheetName);\r\n    this.gquery = gquery;\r\n  }\r\n\r\n  select(headers: string[]): GQueryTableFactory {\r\n    return new GQueryTableFactory(this).select(headers);\r\n  }\r\n\r\n  where(filterFn: (row: any) => boolean): GQueryTableFactory {\r\n    return new GQueryTableFactory(this).where(filterFn);\r\n  }\r\n\r\n  join(\r\n    sheetName: string,\r\n    sheetColumn: string,\r\n    joinColumn: string,\r\n    columnsToReturn?: string[]\r\n  ): GQueryTableFactory {\r\n    return new GQueryTableFactory(this).join(\r\n      sheetName,\r\n      sheetColumn,\r\n      joinColumn,\r\n      columnsToReturn\r\n    );\r\n  }\r\n\r\n  update(\r\n    updateFn: (row: Record<string, any>) => Record<string, any>\r\n  ): GQueryResult {\r\n    return new GQueryTableFactory(this).update(updateFn);\r\n  }\r\n\r\n  append(\r\n    data: { [key: string]: any }[] | { [key: string]: any }\r\n  ): GQueryResult {\r\n    // Handle single object by wrapping it in an array\r\n    const dataArray = Array.isArray(data) ? data : [data];\r\n    return appendInternal(this, dataArray);\r\n  }\r\n\r\n  read(): GQueryResult {\r\n    return new GQueryTableFactory(this).get();\r\n  }\r\n}\r\n\r\nexport class GQueryTableFactory {\r\n  gQueryTable: GQueryTable;\r\n  selectOption?: string[];\r\n  filterOption?: (row: any) => boolean;\r\n  joinOption: {\r\n    sheetName: string;\r\n    sheetColumn: string;\r\n    joinColumn: string;\r\n    columnsToReturn?: string[];\r\n  }[] = [];\r\n\r\n  constructor(GQueryTable: GQueryTable) {\r\n    this.gQueryTable = GQueryTable;\r\n  }\r\n\r\n  select(headers: string[]): GQueryTableFactory {\r\n    this.selectOption = headers;\r\n    return this;\r\n  }\r\n\r\n  where(filterFn: (row: any) => boolean): GQueryTableFactory {\r\n    this.filterOption = filterFn;\r\n    return this;\r\n  }\r\n\r\n  join(\r\n    sheetName: string,\r\n    sheetColumn: string,\r\n    joinColumn: string,\r\n    columnsToReturn?: string[]\r\n  ): GQueryTableFactory {\r\n    this.joinOption.push({\r\n      sheetName,\r\n      sheetColumn,\r\n      joinColumn,\r\n      columnsToReturn,\r\n    });\r\n    return this;\r\n  }\r\n\r\n  get(): GQueryResult {\r\n    return getInternal(this);\r\n  }\r\n\r\n  update(\r\n    updateFn: (row: Record<string, any>) => Record<string, any>\r\n  ): GQueryResult {\r\n    return updateInternal(this, updateFn);\r\n  }\r\n\r\n  append(\r\n    data: { [key: string]: any }[] | { [key: string]: any }\r\n  ): GQueryResult {\r\n    // Handle single object by wrapping it in an array\r\n    const dataArray = Array.isArray(data) ? data : [data];\r\n    return appendInternal(this.gQueryTable, dataArray);\r\n  }\r\n}\r\n\r\nexport type GQueryReadOptions = {\r\n  valueRenderOption?: ValueRenderOption;\r\n  dateTimeRenderOption?: DateTimeRenderOption;\r\n};\r\nexport type GQueryResult = {\r\n  rows: GQueryRow[];\r\n  headers: string[];\r\n};\r\nexport type GQueryRow = Record<string, any> & {\r\n  __meta: {\r\n    rowNum: number;\r\n    colLength: number;\r\n  };\r\n};\r\nexport enum ValueRenderOption {\r\n  FORMATTED_VALUE = \"FORMATTED_VALUE\",\r\n  UNFORMATTED_VALUE = \"UNFORMATTED_VALUE\",\r\n  FORMULA = \"FORMULA\",\r\n}\r\nexport enum DateTimeRenderOption {\r\n  FORMATTED_STRING = \"FORMATTED_STRING\",\r\n  SERIAL_NUMBER = \"SERIAL_NUMBER\",\r\n}\r\n"],"names":[],"mappings":"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"}