{"version":3,"file":"bundle.js","sources":["../src/read.ts","../src/update.ts","../src/index.ts"],"sourcesContent":["import {\r\n  DateTimeRenderOption,\r\n  GQueryFilter,\r\n  Row,\r\n  ValueRenderOption,\r\n} from \"./index\";\r\n\r\nexport function readImplementation(\r\n  spreadsheetId: string,\r\n  sheetName: string,\r\n  options: GQueryReadOptions = {\r\n    dateTimeRenderOption: DateTimeRenderOption.FORMATTED_STRING,\r\n    valueRenderOption: ValueRenderOption.FORMATTED_VALUE,\r\n  }\r\n): GQueryReadData {\r\n  var sheets = [sheetName];\r\n  if (options?.join) {\r\n    sheets = [...new Set([...sheets, ...Object.keys(options.join)])];\r\n  }\r\n\r\n  const optionsWithoutFilterJoin = {\r\n    valueRenderOption: options.valueRenderOption,\r\n    dateTimeRenderOption: options.dateTimeRenderOption,\r\n  };\r\n\r\n  const allSheetData = readManyImplementation(\r\n    spreadsheetId,\r\n    sheets,\r\n    optionsWithoutFilterJoin\r\n  );\r\n\r\n  // Get the main sheet data\r\n  let mainData = allSheetData[sheetName];\r\n\r\n  // Apply filter if provided\r\n  if (options?.filter) {\r\n    mainData = {\r\n      headers: mainData.headers,\r\n      values: mainData.values.filter((row) => options.filter!(row)),\r\n    };\r\n  }\r\n\r\n  // Apply join if provided\r\n  if (options?.join && Object.keys(options.join).length > 0) {\r\n    const joinedData = applyJoin(\r\n      mainData,\r\n      allSheetData,\r\n      Array.isArray(sheetName) ? sheetName[0] : sheetName,\r\n      options.join\r\n    );\r\n    return joinedData;\r\n  }\r\n\r\n  return mainData;\r\n}\r\n\r\nexport function readManyImplementation(\r\n  spreadsheetId: string,\r\n  sheetNames: string[],\r\n  options: GQueryReadOptions = {\r\n    dateTimeRenderOption: DateTimeRenderOption.FORMATTED_STRING,\r\n    valueRenderOption: ValueRenderOption.FORMATTED_VALUE,\r\n  }\r\n): Record<string, GQueryReadData> {\r\n  if (options.filter || options.join) {\r\n    throw new Error(\r\n      \"Filter and join options are not supported in readManyImplementation.\"\r\n    );\r\n  }\r\n  // Get sheet data using the Sheets API batchGet method\r\n  const batchResponse = Sheets?.Spreadsheets?.Values?.batchGet?.(\r\n    spreadsheetId,\r\n    {\r\n      ranges: sheetNames,\r\n      valueRenderOption: options?.valueRenderOption,\r\n      dateTimeRenderOption: options?.dateTimeRenderOption,\r\n    }\r\n  );\r\n\r\n  // Process the response into the expected format\r\n  const response: Record<string, { headers: string[]; rows: any[][] }> = {};\r\n\r\n  if (batchResponse && batchResponse.valueRanges) {\r\n    batchResponse.valueRanges.forEach((valueRange, index) => {\r\n      const currentSheet = sheetNames[index];\r\n      if (valueRange.values && valueRange.values.length > 0) {\r\n        response[currentSheet] = {\r\n          headers: valueRange.values[0],\r\n          rows: valueRange.values.slice(1).filter((row) => row.length > 0), // Filter out empty rows\r\n        };\r\n      } else {\r\n        response[currentSheet] = { headers: [], rows: [] };\r\n      }\r\n    });\r\n  }\r\n  return sheetNames.reduce<Record<string, GQueryReadData>>((acc, sheetName) => {\r\n    const sheetData = response[sheetName];\r\n    acc[sheetName] = processSheetData(sheetData);\r\n    return acc;\r\n  }, {});\r\n}\r\n\r\n// Helper function to process raw sheet data into rows with header keys\r\nfunction processSheetData(sheetData: {\r\n  headers: string[];\r\n  rows: any[][];\r\n}): GQueryReadData {\r\n  if (!sheetData) {\r\n    return { headers: [], values: [] };\r\n  }\r\n\r\n  const { headers, rows } = sheetData;\r\n  const values = rows.map((row, rowIndex) => {\r\n    const obj = row.reduce<Record<string, any>>((acc, cellValue, index) => {\r\n      acc[headers[index]] = cellValue;\r\n      return acc;\r\n    }, {} as Record<string, any>);\r\n    // Attach __meta property as required by Row type\r\n    (obj as Row).__meta = {\r\n      rowNum: rowIndex + 2, // +2 because headers are row 1, and rows is 0-based\r\n      colLength: row.length,\r\n    };\r\n    return obj as Row;\r\n  });\r\n\r\n  return { headers, values };\r\n}\r\n\r\n// Helper function to apply join operations\r\nfunction applyJoin(\r\n  mainData: GQueryReadData,\r\n  allSheetData: Record<string, GQueryReadData>,\r\n  mainSheetName: string,\r\n  join: Record<string, GQueryReadJoin>\r\n): GQueryReadData {\r\n  // Create result with main data's headers\r\n  const result: GQueryReadData = {\r\n    headers: [...mainData.headers],\r\n    values: [...mainData.values],\r\n  };\r\n\r\n  // Process each main data row\r\n  result.values = mainData.values.map((mainRow) => {\r\n    const enrichedRow = { ...mainRow };\r\n\r\n    // For each joined sheet\r\n    Object.entries(join).forEach(([sheetName, joinConfig]) => {\r\n      if (!allSheetData[sheetName]) return;\r\n\r\n      const sheetData = allSheetData[sheetName];\r\n\r\n      // Find matching rows in the joined sheet\r\n      const matchingRows = sheetData.values.filter((joinRow) => {\r\n        // Check all join conditions defined for this sheet\r\n        const conditions = joinConfig.on;\r\n        if (!conditions) return false;\r\n\r\n        return Object.entries(conditions).every(([mainCol, joinCol]) => {\r\n          return mainRow[mainCol] === joinRow[joinCol];\r\n        });\r\n      });\r\n\r\n      // Add matching data to the main row\r\n      if (matchingRows.length > 0) {\r\n        // If includes is specified, only add those fields\r\n        if (joinConfig.include && joinConfig.include.length > 0) {\r\n          joinConfig.include.forEach((field) => {\r\n            enrichedRow[`${sheetName}_${field}`] = matchingRows[0][field];\r\n          });\r\n        } else {\r\n          // Otherwise add all fields with sheet name prefix to avoid collisions\r\n          Object.entries(matchingRows[0]).forEach(([key, value]) => {\r\n            if (key !== \"__meta\") {\r\n              enrichedRow[`${sheetName}_${key}`] = value;\r\n            }\r\n          });\r\n        }\r\n      }\r\n    });\r\n\r\n    return enrichedRow;\r\n  });\r\n\r\n  // Update headers to include any new fields\r\n  const allKeys = new Set<string>();\r\n  result.values.forEach((row) => {\r\n    Object.keys(row).forEach((key) => {\r\n      if (key !== \"__meta\") {\r\n        allKeys.add(key);\r\n      }\r\n    });\r\n  });\r\n  result.headers = Array.from(allKeys);\r\n\r\n  return result;\r\n}\r\n\r\nexport type GQueryReadJoin = {\r\n  on?: Record<string, string>; // {mainField: joinField}\r\n  include?: string[]; // fields to include\r\n};\r\n\r\nexport type GQueryReadOptions = {\r\n  filter?: GQueryFilter;\r\n  join?: Record<string, GQueryReadJoin>;\r\n  valueRenderOption?: ValueRenderOption;\r\n  dateTimeRenderOption?: DateTimeRenderOption;\r\n};\r\n\r\nexport type GQueryReadData = {\r\n  headers: string[];\r\n  values: Row[];\r\n};\r\n","import { DateTimeRenderOption, Row, ValueRenderOption } from \"./index\";\r\n\r\n/**\r\n * Updates rows in a Google Sheet\r\n * @param spreadsheetId The ID of the spreadsheet\r\n * @param sheetName The name of the sheet to update\r\n * @param target Array of row objects to update\r\n * @param updateData Object containing field values to update\r\n * @param options Additional options for the update operation\r\n * @returns Object containing update statistics\r\n */\r\nexport function updateImplementation(\r\n  spreadsheetId: string,\r\n  sheetName: string,\r\n  target: Row[],\r\n  updateData: Record<string, any>,\r\n  options?: GQueryUpdateOptions\r\n): UpdateResult {\r\n  if (!target || target.length === 0) {\r\n    return { updatedRows: 0 };\r\n  }\r\n\r\n  // Apply the updateData object to each row\r\n  const updatedRows = target.map((row) => {\r\n    // Create a shallow copy of the row\r\n    const updatedRow = { ...row };\r\n\r\n    // Apply all updates from updateData object\r\n    Object.entries(updateData).forEach(([key, value]) => {\r\n      if (key !== \"__meta\") {\r\n        // Protect __meta from being modified\r\n        // Support function values that can use the current row\r\n        updatedRow[key] = typeof value === \"function\" ? value(row) : value;\r\n      }\r\n    });\r\n\r\n    return updatedRow;\r\n  });\r\n\r\n  console.log(\"Updated Rows:\", updatedRows);\r\n\r\n  // Sort data by row number to optimize updates\r\n  const sortedData = [...updatedRows].sort(\r\n    (a, b) => a.__meta.rowNum - b.__meta.rowNum\r\n  );\r\n\r\n  // Get all headers from the data to ensure we update all fields\r\n  const allHeaders = new Set<string>();\r\n  sortedData.forEach((row) => {\r\n    Object.keys(row).forEach((key) => {\r\n      if (key !== \"__meta\") {\r\n        allHeaders.add(key);\r\n      }\r\n    });\r\n  });\r\n\r\n  const headers = Array.from(allHeaders);\r\n\r\n  // Prepare the values for batch update\r\n  const updates: BatchUpdate[] = [];\r\n\r\n  sortedData.forEach((row) => {\r\n    // Convert the row object back to an array in the correct header order\r\n    const rowValues = headers.map((header) => {\r\n      return row[header] !== undefined ? row[header] : \"\";\r\n    });\r\n\r\n    // Create a range for this row (A2:Z2 format)\r\n    const rowNum = row.__meta.rowNum;\r\n    const range = `${sheetName}!A${rowNum}:${getColumnLetter(\r\n      headers.length\r\n    )}${rowNum}`;\r\n\r\n    updates.push({\r\n      range,\r\n      values: [rowValues],\r\n    });\r\n  });\r\n\r\n  // Perform batch update\r\n  let updatedCount = 0;\r\n\r\n  if (updates.length > 0) {\r\n    try {\r\n      // Apply default options and override with provided options\r\n      const updateOptions = {\r\n        data: updates,\r\n        valueInputOption: options?.valueInputOption || \"USER_ENTERED\",\r\n        includeValuesInResponse:\r\n          options?.includeValuesInResponse === undefined\r\n            ? true\r\n            : options.includeValuesInResponse,\r\n        responseDateTimeRenderOption: options?.responseDateTimeRenderOption,\r\n        responseValueRenderOption: options?.responseValueRenderOption,\r\n      };\r\n\r\n      const response = Sheets.Spreadsheets.Values.batchUpdate(\r\n        updateOptions,\r\n        spreadsheetId\r\n      );\r\n\r\n      updatedCount = response.totalUpdatedRows || 0;\r\n\r\n      // Extract updated values from the response if includeValuesInResponse is true\r\n      if (updateOptions.includeValuesInResponse && response.responses) {\r\n        const updatedRowsData = response.responses\r\n          .filter((resp) => resp.updatedData && resp.updatedData.values)\r\n          .map((resp) => {\r\n            const values = resp.updatedData.values[0]; // First row of updated values\r\n\r\n            // Extract row number from the range\r\n            const rangeMatch = resp.updatedData.range\r\n              .split(\"!\")[1]\r\n              .match(/\\d+/);\r\n            if (!rangeMatch) {\r\n              throw new Error(\r\n                `Could not parse row number from range: ${resp.updatedData.range}`\r\n              );\r\n            }\r\n\r\n            const rowNum = parseInt(rangeMatch[0]);\r\n\r\n            // Find the corresponding row in sortedData by row number\r\n            const originalRowData = sortedData.find(\r\n              (row) => row.__meta.rowNum === rowNum\r\n            );\r\n            if (!originalRowData) {\r\n              throw new Error(\r\n                `Could not find original row data for row number: ${rowNum}`\r\n              );\r\n            }\r\n\r\n            // Convert back to object with headers\r\n            const rowObject = headers.reduce((obj, header, idx) => {\r\n              obj[header] = values[idx];\r\n              return obj;\r\n            }, {} as Record<string, any>);\r\n\r\n            // Add meta information from the original row\r\n            (rowObject as Row).__meta = originalRowData.__meta;\r\n\r\n            return rowObject as Row;\r\n          });\r\n\r\n        return {\r\n          updatedRows: updatedCount,\r\n          updatedRowsData,\r\n        };\r\n      }\r\n\r\n      return { updatedRows: updatedCount };\r\n    } catch (error) {\r\n      throw new Error(`Failed to update sheet: ${error}`);\r\n    }\r\n  }\r\n\r\n  return { updatedRows: updatedCount };\r\n}\r\n\r\n/**\r\n * Converts a column number to column letter (e.g., 1 -> A, 27 -> AA)\r\n */\r\nfunction getColumnLetter(columnNumber: number): string {\r\n  let dividend = columnNumber;\r\n  let columnLetter = \"\";\r\n\r\n  while (dividend > 0) {\r\n    const modulo = (dividend - 1) % 26;\r\n    columnLetter = String.fromCharCode(65 + modulo) + columnLetter;\r\n    dividend = Math.floor((dividend - modulo) / 26);\r\n  }\r\n\r\n  return columnLetter;\r\n}\r\n\r\ninterface BatchUpdate {\r\n  range: string;\r\n  values: any[][];\r\n}\r\n\r\nexport interface UpdateResult {\r\n  updatedRows: number;\r\n  updatedRowsData?: Row[];\r\n  errors?: string[];\r\n}\r\n\r\nexport type GQueryUpdateOptions = {\r\n  valueInputOption?: \"USER_ENTERED\" | \"RAW\";\r\n  includeValuesInResponse?: boolean;\r\n  responseDateTimeRenderOption?: DateTimeRenderOption;\r\n  responseValueRenderOption?: ValueRenderOption;\r\n};\r\n","import {\r\n  GQueryReadOptions,\r\n  readImplementation,\r\n  readManyImplementation,\r\n} from \"./read\";\r\nimport { GQueryUpdateOptions, updateImplementation } from \"./update\";\r\n\r\nexport class GQuery {\r\n  spreadsheetId: string;\r\n\r\n  constructor(spreadsheetId?: string) {\r\n    this.spreadsheetId = spreadsheetId\r\n      ? spreadsheetId\r\n      : SpreadsheetApp.getActiveSpreadsheet().getId();\r\n  }\r\n\r\n  //   create(sheetName: string, data: any[]) {\r\n  //     // TODO:\r\n  //   }\r\n\r\n  read(sheetName: string, options?: GQueryReadOptions) {\r\n    return readImplementation(this.spreadsheetId, sheetName, options);\r\n  }\r\n\r\n  readMany(sheetNames: string[], options?: GQueryReadOptions) {\r\n    return readManyImplementation(this.spreadsheetId, sheetNames, options);\r\n  }\r\n\r\n  update(\r\n    sheetName: string,\r\n    target: Row[],\r\n    updateData: Record<string, any>,\r\n    options?: GQueryUpdateOptions\r\n  ) {\r\n    return updateImplementation(\r\n      this.spreadsheetId,\r\n      sheetName,\r\n      target,\r\n      updateData,\r\n      options\r\n    );\r\n  }\r\n}\r\n\r\nexport type GQueryFilter = (row: any) => boolean;\r\n\r\nexport type Row = Record<string, any> & {\r\n  __meta: {\r\n    rowNum: number;\r\n    colLength: number;\r\n  };\r\n};\r\n\r\nexport enum ValueRenderOption {\r\n  FORMATTED_VALUE = \"FORMATTED_VALUE\",\r\n  UNFORMATTED_VALUE = \"UNFORMATTED_VALUE\",\r\n  FORMULA = \"FORMULA\",\r\n}\r\n\r\nexport enum DateTimeRenderOption {\r\n  FORMATTED_STRING = \"FORMATTED_STRING\",\r\n  SERIAL_NUMBER = \"SERIAL_NUMBER\",\r\n}\r\n"],"names":[],"mappings":"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"}