{"version":3,"file":"bundle.global.js","sources":["../src/get.ts","../src/update.ts","../src/index.ts"],"sourcesContent":["import {\r\n  DateTimeRenderOption,\r\n  GQuery,\r\n  GQueryReadOptions,\r\n  GQueryResult,\r\n  GQueryRow,\r\n  GQueryTable,\r\n  GQueryTableFactory,\r\n  ValueRenderOption,\r\n} from \"./index\";\r\n\r\nexport function getManyInternal(\r\n  gquery: GQuery,\r\n  sheetNames: string[],\r\n  options?: GQueryReadOptions\r\n): {\r\n  [sheetName: string]: GQueryResult;\r\n} {\r\n  if (!sheetNames || sheetNames.length === 0) {\r\n    return {};\r\n  }\r\n\r\n  // Set default options if not provided\r\n  const valueRenderOption =\r\n    options?.valueRenderOption || ValueRenderOption.FORMATTED_VALUE;\r\n  const dateTimeRenderOption =\r\n    options?.dateTimeRenderOption || DateTimeRenderOption.FORMATTED_STRING;\r\n\r\n  // Use Sheets API to batch get the data\r\n  const response = Sheets.Spreadsheets.Values.batchGet(gquery.spreadsheetId, {\r\n    ranges: sheetNames,\r\n    valueRenderOption: valueRenderOption,\r\n    dateTimeRenderOption: dateTimeRenderOption,\r\n  });\r\n\r\n  const result: { [sheetName: string]: GQueryResult } = {};\r\n\r\n  if (!response || !response.valueRanges) {\r\n    return result;\r\n  }\r\n\r\n  // Process each returned value range\r\n  response.valueRanges.forEach((valueRange, index) => {\r\n    const sheetName = sheetNames[index];\r\n\r\n    if (!valueRange.values || valueRange.values.length === 0) {\r\n      // Handle empty sheet\r\n      result[sheetName] = { headers: [], rows: [] };\r\n      return;\r\n    }\r\n\r\n    // First row contains headers\r\n    const headers = valueRange.values[0].map((header) => String(header));\r\n    const rows: GQueryRow[] = [];\r\n\r\n    // Process data rows (starting from index 1 to skip headers)\r\n    for (let i = 1; i < valueRange.values.length; i++) {\r\n      const rowData = valueRange.values[i];\r\n      const row: GQueryRow = {\r\n        __meta: {\r\n          rowNum: i + 1, // 1-based row number (+1 because we're starting from index 1)\r\n          colLength: rowData.length,\r\n        },\r\n      };\r\n\r\n      // Map each column value to its corresponding header\r\n      for (let j = 0; j < headers.length; j++) {\r\n        const header = headers[j];\r\n        row[header] = j < rowData.length ? rowData[j] : null;\r\n      }\r\n\r\n      rows.push(row);\r\n    }\r\n\r\n    result[sheetName] = { headers, rows };\r\n  });\r\n\r\n  return result;\r\n}\r\n\r\nexport function getInternal(\r\n  gqueryTableFactory: GQueryTableFactory\r\n): GQueryResult {\r\n  const gqueryTable = gqueryTableFactory.gQueryTable;\r\n  const gquery = gqueryTable.gquery;\r\n  // Determine which sheets we need to read from\r\n  const sheetsToRead = [gqueryTable.sheetName];\r\n\r\n  // Add all join sheets\r\n  if (gqueryTableFactory.joinOption.length > 0) {\r\n    gqueryTableFactory.joinOption.forEach((join) => {\r\n      if (!sheetsToRead.includes(join.sheetName)) {\r\n        sheetsToRead.push(join.sheetName);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Read data from all required sheets at once\r\n  const results = gquery.getMany(sheetsToRead);\r\n\r\n  // If the main sheet doesn't exist or has no data\r\n  if (\r\n    !results[gqueryTable.sheetName] ||\r\n    results[gqueryTable.sheetName].rows.length === 0\r\n  ) {\r\n    return { headers: [], rows: [] };\r\n  }\r\n\r\n  // Get data for the primary table\r\n  let result = results[gqueryTable.sheetName];\r\n  let rows = result.rows;\r\n  let headers = result.headers;\r\n\r\n  // Process each join sequentially\r\n  if (gqueryTableFactory.joinOption.length > 0) {\r\n    gqueryTableFactory.joinOption.forEach((joinConfig) => {\r\n      const { sheetName, sheetColumn, joinColumn, columnsToReturn } =\r\n        joinConfig;\r\n\r\n      const joinData = results[sheetName];\r\n\r\n      if (!joinData || !joinData.rows || joinData.rows.length === 0) {\r\n        return; // Skip this join\r\n      }\r\n\r\n      // Create join lookup table\r\n      const joinMap: Record<string, any[]> = {};\r\n\r\n      // Check if the join column exists in the join table\r\n      const joinHeaders = joinData.headers;\r\n      if (!joinHeaders.includes(sheetColumn)) {\r\n        return; // Skip this join\r\n      }\r\n\r\n      joinData.rows.forEach((joinRow) => {\r\n        const joinKey = String(joinRow[sheetColumn]);\r\n        if (!joinMap[joinKey]) {\r\n          joinMap[joinKey] = [];\r\n        }\r\n        joinMap[joinKey].push(joinRow);\r\n      });\r\n\r\n      // Perform the join operation\r\n      rows = rows.map((row) => {\r\n        const localJoinValue = row[joinColumn];\r\n        const joinedRows = joinMap[String(localJoinValue)] || [];\r\n\r\n        // Create joined row with all join table fields\r\n        const joinedRow = { ...row };\r\n\r\n        joinedRows.forEach((joinRow, index) => {\r\n          // Determine which columns to include from join\r\n          const columnsToInclude =\r\n            columnsToReturn ||\r\n            Object.keys(joinRow).filter(\r\n              (key) => key !== \"__meta\" && key !== sheetColumn\r\n            );\r\n\r\n          columnsToInclude.forEach((key) => {\r\n            if (joinRow.hasOwnProperty(key) && key !== \"__meta\") {\r\n              // For multiple joined rows, add suffix _1, _2, etc.\r\n              const suffix = joinedRows.length > 1 ? `_${index + 1}` : \"\";\r\n              const targetKey = key === sheetColumn ? key : `${key}${suffix}`;\r\n              joinedRow[targetKey] = joinRow[key];\r\n            }\r\n          });\r\n        });\r\n\r\n        return joinedRow;\r\n      });\r\n    });\r\n  }\r\n\r\n  // Apply filter if specified\r\n  if (gqueryTableFactory.filterOption) {\r\n    rows = rows.filter(gqueryTableFactory.filterOption);\r\n  }\r\n\r\n  // Apply select if specified\r\n  if (\r\n    gqueryTableFactory.selectOption &&\r\n    gqueryTableFactory.selectOption.length > 0\r\n  ) {\r\n    // Create a map to track columns from joined tables\r\n    const joinedColumns = new Set<string>();\r\n\r\n    // Collect all columns from joined tables\r\n    rows.forEach((row) => {\r\n      Object.keys(row).forEach((key) => {\r\n        // If the column is not in the original headers, it's from a join\r\n        if (!headers.includes(key) && key !== \"__meta\") {\r\n          joinedColumns.add(key);\r\n        }\r\n      });\r\n    });\r\n\r\n    // If we have a select option, determine which columns to keep\r\n    let selectedHeaders: string[];\r\n\r\n    // Check if any of the selected headers is \"Model\" or \"Model_Name\"\r\n    // If we're selecting the join columns, we want to include all related joined fields\r\n    if (\r\n      gqueryTableFactory.selectOption.some(\r\n        (header) =>\r\n          header === \"Model\" ||\r\n          header === \"Model_Name\" ||\r\n          gqueryTableFactory.joinOption.some(\r\n            (j) => j.joinColumn === header || j.sheetColumn === header\r\n          )\r\n      )\r\n    ) {\r\n      // Include all join-related columns and the selected columns\r\n      selectedHeaders = [...gqueryTableFactory.selectOption];\r\n      joinedColumns.forEach((joinCol) => {\r\n        selectedHeaders.push(joinCol);\r\n      });\r\n    } else {\r\n      // Otherwise only include explicitly selected columns\r\n      selectedHeaders = [...gqueryTableFactory.selectOption];\r\n    }\r\n\r\n    // Remove duplicates\r\n    selectedHeaders = [...new Set(selectedHeaders)];\r\n\r\n    // Filter rows to only include selected columns\r\n    rows = rows.map((row) => {\r\n      const selectedRow: GQueryRow = {\r\n        __meta: row.__meta,\r\n      };\r\n\r\n      selectedHeaders.forEach((header) => {\r\n        if (row.hasOwnProperty(header)) {\r\n          selectedRow[header] = row[header];\r\n        }\r\n      });\r\n\r\n      return selectedRow;\r\n    });\r\n\r\n    // Update headers to include both selected and joined columns\r\n    return {\r\n      headers: selectedHeaders,\r\n      rows,\r\n    };\r\n  }\r\n\r\n  return {\r\n    headers,\r\n    rows,\r\n  };\r\n}\r\n","import { GQueryResult, GQueryTableFactory, GQueryRow } from \"./index\";\r\n\r\nexport function updateInternal(\r\n  gQueryTableFactory: GQueryTableFactory,\r\n  updateFn: (row: Record<string, any>) => Record<string, any>\r\n): GQueryResult {\r\n  // Get table configuration\r\n  const spreadsheetId = gQueryTableFactory.gQueryTable.spreadsheetId;\r\n  const range = gQueryTableFactory.gQueryTable.sheetName;\r\n\r\n  // Fetch current data from the sheet\r\n  const response = Sheets.Spreadsheets.Values.get(spreadsheetId, range);\r\n  const values = response.values || [];\r\n\r\n  if (values.length === 0) {\r\n    return { rows: [], headers: [] };\r\n  }\r\n\r\n  // Extract headers and rows\r\n  const headers = values[0];\r\n  const rows = values.slice(1).map((row) => {\r\n    const obj: Record<string, any> = {};\r\n    headers.forEach((header: string, i: number) => {\r\n      obj[header] = row[i];\r\n    });\r\n    return obj;\r\n  });\r\n\r\n  // Filter rows if where function is provided\r\n  const filteredRows = gQueryTableFactory.filterOption\r\n    ? rows.filter(gQueryTableFactory.filterOption)\r\n    : rows;\r\n\r\n  // Update filtered rows\r\n  const updatedRows = filteredRows.map((row) => {\r\n    // Apply the update function to get the updated row values\r\n    const updatedRow = updateFn(row);\r\n\r\n    // Find the index of this row in the original data array\r\n    const rowIndex = rows.indexOf(row);\r\n\r\n    // Only update the spreadsheet if we found the row\r\n    if (rowIndex !== -1) {\r\n      // Update the row in the values array with the new values\r\n      const newRowValues = headers.map((header) => updatedRow[header] || \"\");\r\n      values[rowIndex + 1] = newRowValues; // +1 to account for header row\r\n    }\r\n\r\n    // Add __meta to each row with required properties\r\n    return {\r\n      ...updatedRow,\r\n      __meta: {\r\n        rowNum: rowIndex + 2, // +2 because we have headers at index 0 and row index is 0-based\r\n        colLength: headers.length,\r\n      },\r\n    };\r\n  });\r\n\r\n  // Only update the rows that were modified if there are any\r\n  if (updatedRows.length > 0) {\r\n    // Prepare a single bulk update\r\n    const dataToUpdate = [];\r\n    let hasUpdates = false;\r\n\r\n    // Go through the original values array and replace only the rows that were updated\r\n    for (let i = 1; i < values.length; i++) {\r\n      const originalRow = rows[i - 1];\r\n      // Check if this row was in our filtered/updated set\r\n      const updatedRowIndex = filteredRows.indexOf(originalRow);\r\n\r\n      if (updatedRowIndex !== -1) {\r\n        // This row was updated, use the new values\r\n        hasUpdates = true;\r\n        const updatedRow = updatedRows[updatedRowIndex];\r\n        dataToUpdate.push(headers.map((header) => updatedRow[header] || \"\"));\r\n      } else {\r\n        // This row wasn't updated, keep the original values\r\n        dataToUpdate.push(values[i]);\r\n      }\r\n    }\r\n\r\n    // Only send the update if we actually modified rows\r\n    if (hasUpdates) {\r\n      // Find the range of modified rows to optimize the update\r\n      const rowIndices = filteredRows\r\n        .map((row) => rows.indexOf(row))\r\n        .filter((idx) => idx !== -1);\r\n\r\n      if (rowIndices.length > 0) {\r\n        // Create a special wrapped update function that tracks what actually changed\r\n        const modifiedColumns = new Set<string>();\r\n        const originalValues = {};\r\n\r\n        // Store the original values before update to detect changes\r\n        filteredRows.forEach((row) => {\r\n          const rowKey = JSON.stringify(row);\r\n          originalValues[rowKey] = { ...row };\r\n        });\r\n\r\n        // Detect explicit assignments and modifications in the update function\r\n        filteredRows.forEach((originalRow, idx) => {\r\n          const updatedRow = updatedRows[idx];\r\n          const original = originalValues[JSON.stringify(originalRow)] || {};\r\n\r\n          // Look for changes by comparing original values to updated values\r\n          headers.forEach((header) => {\r\n            if (\r\n              original[header] !== updatedRow[header] &&\r\n              updatedRow[header] !== undefined\r\n            ) {\r\n              modifiedColumns.add(header);\r\n              console.log(\r\n                `Detected change in column ${header}: ${original[header]} -> ${updatedRow[header]}`\r\n              );\r\n            }\r\n          });\r\n        });\r\n\r\n        // For assignment expressions used in the update function\r\n        // Make sure we include a default set of columns\r\n        if (modifiedColumns.size === 0) {\r\n          // For update functions like (row) => row.Assigned_To = \"Steve\"\r\n          // Default to updating Assigned_To column\r\n          console.log(\r\n            \"No columns detected as modified, checking for assignment-style updates\"\r\n          );\r\n\r\n          // Check common assignment patterns based on the update function\r\n          const fnStr = updateFn.toString();\r\n          const assignmentMatch = fnStr.match(/row\\.(\\w+)\\s*=/);\r\n          if (assignmentMatch && assignmentMatch[1]) {\r\n            const columnName = assignmentMatch[1];\r\n            if (headers.includes(columnName)) {\r\n              modifiedColumns.add(columnName);\r\n              console.log(\r\n                `Detected assignment-style update to column ${columnName}`\r\n              );\r\n            }\r\n          }\r\n        }\r\n\r\n        // If still no columns were actually modified, return without updating\r\n        if (modifiedColumns.size === 0) {\r\n          console.log(\"No modifications detected, skipping update\");\r\n          // Make sure the rows in the response have the proper structure\r\n          const properRows = updatedRows.map((row) => {\r\n            const properRow: Record<string, any> = {};\r\n            headers.forEach((header) => {\r\n              properRow[header] = row[header] || \"\";\r\n            });\r\n            properRow.__meta = row.__meta;\r\n            return properRow;\r\n          });\r\n          return {\r\n            rows: properRows as GQueryRow[],\r\n            headers: headers,\r\n          };\r\n        }\r\n\r\n        // Get the indices of the modified columns\r\n        const modifiedColumnIndices = Array.from(modifiedColumns).map((col) =>\r\n          headers.indexOf(col)\r\n        );\r\n\r\n        // Calculate the range of rows to update\r\n        const minRowIndex = Math.min(...rowIndices) + 1;\r\n        const maxRowIndex = Math.max(...rowIndices) + 1;\r\n\r\n        // For each modified column, create a separate update\r\n        for (const columnName of modifiedColumns) {\r\n          const columnIndex = headers.indexOf(columnName);\r\n          if (columnIndex === -1) continue;\r\n\r\n          // Column letter for A1 notation (A, B, C, etc.)\r\n          const columnLetter = String.fromCharCode(65 + columnIndex);\r\n\r\n          // Create column data for each modified row\r\n          const columnData = [];\r\n\r\n          // For each row in the update range\r\n          for (let i = 0; i < maxRowIndex - minRowIndex + 1; i++) {\r\n            const originalRowIndex = minRowIndex + i;\r\n            const originalRow = rows[originalRowIndex - 1];\r\n            const filteredIndex = filteredRows.indexOf(originalRow);\r\n\r\n            if (filteredIndex !== -1) {\r\n              // Use the updated value\r\n              columnData.push([updatedRows[filteredIndex][columnName]]);\r\n            } else {\r\n              // Row wasn't in our filter, keep original\r\n              columnData.push([values[originalRowIndex][columnIndex]]);\r\n            }\r\n          }\r\n\r\n          // Create A1 notation for just this column's range\r\n          const columnRange = `${range}!${columnLetter}${\r\n            minRowIndex + 1\r\n          }:${columnLetter}${maxRowIndex + 1}`;\r\n\r\n          // Update just this column\r\n          Sheets.Spreadsheets.Values.update(\r\n            { values: columnData },\r\n            spreadsheetId,\r\n            columnRange,\r\n            { valueInputOption: \"USER_ENTERED\" }\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Make sure the rows in the response have the proper structure\r\n  const properRows = updatedRows.map((row) => {\r\n    const properRow: Record<string, any> = {};\r\n    headers.forEach((header) => {\r\n      properRow[header] = row[header] || \"\";\r\n    });\r\n    properRow.__meta = row.__meta;\r\n    return properRow;\r\n  });\r\n\r\n  return {\r\n    rows: properRows as GQueryRow[],\r\n    headers: headers,\r\n  };\r\n}\r\n","import { getInternal, getManyInternal } from \"./get\";\r\nimport { updateInternal } from \"./update\";\r\n\r\nexport class GQuery {\r\n  spreadsheetId: string;\r\n\r\n  constructor(spreadsheetId?: string) {\r\n    this.spreadsheetId = spreadsheetId\r\n      ? spreadsheetId\r\n      : SpreadsheetApp.getActiveSpreadsheet().getId();\r\n  }\r\n\r\n  from(sheetName: string): GQueryTable {\r\n    return new GQueryTable(this, this.spreadsheetId, sheetName);\r\n  }\r\n\r\n  getMany(\r\n    sheetNames: string[],\r\n    options?: GQueryReadOptions\r\n  ): {\r\n    [sheetName: string]: GQueryResult;\r\n  } {\r\n    return getManyInternal(this, sheetNames, options);\r\n  }\r\n}\r\n\r\nexport class GQueryTable {\r\n  gquery: GQuery;\r\n  spreadsheetId: string;\r\n  spreadsheet: GoogleAppsScript.Spreadsheet.Spreadsheet;\r\n  sheetName: string;\r\n  sheet: GoogleAppsScript.Spreadsheet.Sheet;\r\n\r\n  constructor(gquery: GQuery, spreadsheetId: string, sheetName: string) {\r\n    this.spreadsheetId = spreadsheetId;\r\n    this.sheetName = sheetName;\r\n    this.spreadsheet = SpreadsheetApp.openById(spreadsheetId);\r\n    this.sheet = this.spreadsheet.getSheetByName(sheetName);\r\n    this.gquery = gquery;\r\n  }\r\n\r\n  select(headers: string[]): GQueryTableFactory {\r\n    return new GQueryTableFactory(this).select(headers);\r\n  }\r\n\r\n  where(filterFn: (row: any) => boolean): GQueryTableFactory {\r\n    return new GQueryTableFactory(this).where(filterFn);\r\n  }\r\n\r\n  join(\r\n    sheetName: string,\r\n    sheetColumn: string,\r\n    joinColumn: string,\r\n    columnsToReturn?: string[]\r\n  ): GQueryTableFactory {\r\n    return new GQueryTableFactory(this).join(\r\n      sheetName,\r\n      sheetColumn,\r\n      joinColumn,\r\n      columnsToReturn\r\n    );\r\n  }\r\n\r\n  update(\r\n    updateFn: (row: Record<string, any>) => Record<string, any>\r\n  ): GQueryResult {\r\n    return new GQueryTableFactory(this).update(updateFn);\r\n  }\r\n\r\n  read(): GQueryResult {\r\n    return new GQueryTableFactory(this).get();\r\n  }\r\n}\r\n\r\nexport class GQueryTableFactory {\r\n  gQueryTable: GQueryTable;\r\n  selectOption?: string[];\r\n  filterOption?: (row: any) => boolean;\r\n  joinOption: {\r\n    sheetName: string;\r\n    sheetColumn: string;\r\n    joinColumn: string;\r\n    columnsToReturn?: string[];\r\n  }[] = [];\r\n\r\n  constructor(GQueryTable: GQueryTable) {\r\n    this.gQueryTable = GQueryTable;\r\n  }\r\n\r\n  select(headers: string[]): GQueryTableFactory {\r\n    this.selectOption = headers;\r\n    return this;\r\n  }\r\n\r\n  where(filterFn: (row: any) => boolean): GQueryTableFactory {\r\n    this.filterOption = filterFn;\r\n    return this;\r\n  }\r\n\r\n  join(\r\n    sheetName: string,\r\n    sheetColumn: string,\r\n    joinColumn: string,\r\n    columnsToReturn?: string[]\r\n  ): GQueryTableFactory {\r\n    this.joinOption.push({\r\n      sheetName,\r\n      sheetColumn,\r\n      joinColumn,\r\n      columnsToReturn,\r\n    });\r\n    return this;\r\n  }\r\n\r\n  get(): GQueryResult {\r\n    return getInternal(this);\r\n  }\r\n\r\n  update(\r\n    updateFn: (row: Record<string, any>) => Record<string, any>\r\n  ): GQueryResult {\r\n    return updateInternal(this, updateFn);\r\n  }\r\n}\r\n\r\nexport type GQueryReadOptions = {\r\n  valueRenderOption?: ValueRenderOption;\r\n  dateTimeRenderOption?: DateTimeRenderOption;\r\n};\r\nexport type GQueryResult = {\r\n  rows: GQueryRow[];\r\n  headers: string[];\r\n};\r\nexport type GQueryRow = Record<string, any> & {\r\n  __meta: {\r\n    rowNum: number;\r\n    colLength: number;\r\n  };\r\n};\r\nexport enum ValueRenderOption {\r\n  FORMATTED_VALUE = \"FORMATTED_VALUE\",\r\n  UNFORMATTED_VALUE = \"UNFORMATTED_VALUE\",\r\n  FORMULA = \"FORMULA\",\r\n}\r\nexport enum DateTimeRenderOption {\r\n  FORMATTED_STRING = \"FORMATTED_STRING\",\r\n  SERIAL_NUMBER = \"SERIAL_NUMBER\",\r\n}\r\n"],"names":["ValueRenderOption","DateTimeRenderOption"],"mappings":"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"}