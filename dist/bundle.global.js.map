{"version":3,"file":"bundle.global.js","sources":["../src/read.ts","../src/index.ts"],"sourcesContent":["import { GQueryFilter } from \"./index\";\r\n\r\nexport function readImplementation(\r\n  spreadsheetId: string,\r\n  sheetName: string,\r\n  options: GQueryReadOptions = {\r\n    dateTimeRenderOption: DateTimeRenderOption.FORMATTED_STRING,\r\n    valueRenderOption: ValueRenderOption.FORMATTED_VALUE,\r\n  }\r\n): GQueryReadData {\r\n  var sheets = Array.isArray(sheetName) ? sheetName : [sheetName];\r\n  if (options?.join && \"sheets\" in options.join) {\r\n    sheets = [...new Set([...sheets, ...options.join.sheets])];\r\n  }\r\n\r\n  // Get sheet data using the Sheets API batchGet method\r\n  const batchResponse = Sheets?.Spreadsheets?.Values?.batchGet?.(\r\n    spreadsheetId,\r\n    {\r\n      ranges: sheets,\r\n      valueRenderOption: options?.valueRenderOption,\r\n      dateTimeRenderOption: options?.dateTimeRenderOption,\r\n    }\r\n  );\r\n\r\n  // Process the response into the expected format\r\n  const response: Record<string, { headers: string[]; rows: any[][] }> = {};\r\n\r\n  if (batchResponse && batchResponse.valueRanges) {\r\n    batchResponse.valueRanges.forEach((valueRange, index) => {\r\n      const currentSheet = sheets[index];\r\n      if (valueRange.values && valueRange.values.length > 0) {\r\n        response[currentSheet] = {\r\n          headers: valueRange.values[0],\r\n          rows: valueRange.values.slice(1).filter((row) => row.length > 0), // Filter out empty rows\r\n        };\r\n      } else {\r\n        response[currentSheet] = { headers: [], rows: [] };\r\n      }\r\n    });\r\n  }\r\n\r\n  // Process primary sheet data\r\n  let mainData = processSheetData(response[sheetName]);\r\n\r\n  // Apply filter if provided\r\n  if (options?.filter) {\r\n    mainData = {\r\n      headers: mainData.headers,\r\n      values: mainData.values.filter((row) => options.filter!(row)),\r\n    };\r\n  }\r\n\r\n  // Apply join if provided\r\n  if (options?.join && options.join.sheets && options.join.sheets.length > 0) {\r\n    const joinedData = applyJoin(mainData, response, sheetName, options.join);\r\n    return joinedData;\r\n  }\r\n\r\n  return mainData;\r\n}\r\n\r\nexport function readManyImplementation(\r\n  spreadsheetId: string,\r\n  sheetNames: string[],\r\n  options: GQueryReadOptions = {\r\n    dateTimeRenderOption: DateTimeRenderOption.FORMATTED_STRING,\r\n    valueRenderOption: ValueRenderOption.FORMATTED_VALUE,\r\n  }\r\n): Record<string, GQueryReadData> {\r\n  if (options.filter || options.join) {\r\n    throw new Error(\r\n      \"Filter and join options are not supported in readManyImplementation.\"\r\n    );\r\n  }\r\n  // Get sheet data using the Sheets API batchGet method\r\n  const batchResponse = Sheets?.Spreadsheets?.Values?.batchGet?.(\r\n    spreadsheetId,\r\n    {\r\n      ranges: sheetNames,\r\n      valueRenderOption: options?.valueRenderOption,\r\n      dateTimeRenderOption: options?.dateTimeRenderOption,\r\n    }\r\n  );\r\n\r\n  // Process the response into the expected format\r\n  const response: Record<string, { headers: string[]; rows: any[][] }> = {};\r\n\r\n  if (batchResponse && batchResponse.valueRanges) {\r\n    batchResponse.valueRanges.forEach((valueRange, index) => {\r\n      const currentSheet = sheetNames[index];\r\n      if (valueRange.values && valueRange.values.length > 0) {\r\n        response[currentSheet] = {\r\n          headers: valueRange.values[0],\r\n          rows: valueRange.values.slice(1).filter((row) => row.length > 0), // Filter out empty rows\r\n        };\r\n      } else {\r\n        response[currentSheet] = { headers: [], rows: [] };\r\n      }\r\n    });\r\n  }\r\n  return sheetNames.reduce<Record<string, GQueryReadData>>((acc, sheetName) => {\r\n    const sheetData = response[sheetName];\r\n    acc[sheetName] = processSheetData(sheetData);\r\n    return acc;\r\n  }, {});\r\n}\r\n\r\n// Helper function to process raw sheet data into rows with header keys\r\nfunction processSheetData(sheetData: {\r\n  headers: string[];\r\n  rows: any[][];\r\n}): GQueryReadData {\r\n  if (!sheetData) {\r\n    return { headers: [], values: [] };\r\n  }\r\n\r\n  const { headers, rows } = sheetData;\r\n  const values = rows.map((row) => {\r\n    return row.reduce<Record<string, any>>((obj, cellValue, index) => {\r\n      obj[headers[index]] = cellValue;\r\n      return obj;\r\n    }, {});\r\n  });\r\n\r\n  return { headers, values };\r\n}\r\n\r\n// Helper function to apply join operations\r\nfunction applyJoin(\r\n  mainData: GQueryReadData,\r\n  allSheetData: Record<string, { headers: string[]; rows: any[][] }>,\r\n  mainSheetName: string,\r\n  join: GQueryReadJoin\r\n): GQueryReadData {\r\n  // Process joined sheets data\r\n  const joinedSheetsData = join.sheets.reduce<Record<string, GQueryReadData>>(\r\n    (acc, sheetName) => {\r\n      if (allSheetData[sheetName]) {\r\n        acc[sheetName] = processSheetData(allSheetData[sheetName]);\r\n      }\r\n      return acc;\r\n    },\r\n    {}\r\n  );\r\n\r\n  // If no where function provided, return unmodified data\r\n  if (!join.where) {\r\n    return mainData;\r\n  }\r\n\r\n  const result: GQueryReadData = {\r\n    headers: [...mainData.headers],\r\n    values: [],\r\n  };\r\n\r\n  // Create a context object with all data\r\n  const context: Record<string, any> = {};\r\n\r\n  // Add the main sheet data as an array of objects\r\n  context[mainSheetName] = mainData.values;\r\n\r\n  // Add all joined sheets' data\r\n  Object.entries(joinedSheetsData).forEach(([sheetName, data]) => {\r\n    context[sheetName] = data.values;\r\n  });\r\n\r\n  // Capture the returned object from array methods like some()\r\n  let capturedReturnValue: any = null;\r\n\r\n  // Override Array.prototype.some for this execution\r\n  const originalSome = Array.prototype.some;\r\n  Array.prototype.some = function (callback: any) {\r\n    for (let i = 0; i < this.length; i++) {\r\n      const returnValue = callback(this[i], i, this);\r\n      if (returnValue && typeof returnValue === \"object\") {\r\n        // Capture the returned object\r\n        capturedReturnValue = returnValue;\r\n      }\r\n      if (returnValue) return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  try {\r\n    // Apply the where function with the context\r\n    const whereResult = join.where(context);\r\n\r\n    // Process the result based on its type\r\n    if (Array.isArray(whereResult)) {\r\n      // If an array is returned, use it as the values\r\n      result.values = whereResult;\r\n\r\n      // Update headers if new properties were added in the returned objects\r\n      if (whereResult.length > 0) {\r\n        const allKeys = new Set(result.headers);\r\n        whereResult.forEach((row) => {\r\n          Object.keys(row).forEach((key) => allKeys.add(key));\r\n        });\r\n        result.headers = Array.from(allKeys);\r\n      }\r\n    } else if (whereResult === true && capturedReturnValue) {\r\n      // If true is returned from an array method like some() and we captured a return value\r\n      // Only include the values from the original item and specifically returned properties\r\n      result.values = mainData.values.map((originalItem) => {\r\n        // Start with the original item\r\n        const resultItem = { ...originalItem };\r\n\r\n        // Only add the specific properties from the captured return value\r\n        if (capturedReturnValue) {\r\n          Object.keys(capturedReturnValue).forEach((key) => {\r\n            if (!originalItem.hasOwnProperty(key)) {\r\n              resultItem[key] = capturedReturnValue[key];\r\n            }\r\n          });\r\n        }\r\n\r\n        return resultItem;\r\n      });\r\n\r\n      // Update headers to include the new properties\r\n      if (result.values.length > 0 && capturedReturnValue) {\r\n        const newKeys = Object.keys(capturedReturnValue).filter(\r\n          (key) =>\r\n            !result.headers.includes(key) &&\r\n            !mainData.values[0].hasOwnProperty(key)\r\n        );\r\n        if (newKeys.length > 0) {\r\n          result.headers.push(...newKeys);\r\n        }\r\n      }\r\n    } else if (whereResult && typeof whereResult === \"object\") {\r\n      // If a single object is returned, use it as a single row\r\n      result.values.push(whereResult);\r\n\r\n      // Update headers if new properties were added\r\n      const newKeys = Object.keys(whereResult).filter(\r\n        (key) => !result.headers.includes(key)\r\n      );\r\n      if (newKeys.length > 0) {\r\n        result.headers.push(...newKeys);\r\n      }\r\n    }\r\n  } finally {\r\n    // Restore the original method\r\n    Array.prototype.some = originalSome;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport type GQueryReadJoin = {\r\n  sheets: string[];\r\n  where?: (row: Record<string, any>) => boolean | Record<string, any>;\r\n};\r\n\r\nexport type GQueryReadOptions = {\r\n  filter?: GQueryFilter;\r\n  join?: GQueryReadJoin;\r\n  valueRenderOption?: ValueRenderOption;\r\n  dateTimeRenderOption?: DateTimeRenderOption;\r\n};\r\n\r\nexport type GQueryReadData = {\r\n  headers: string[];\r\n  values: Record<string, any>[];\r\n};\r\n\r\nenum ValueRenderOption {\r\n  FORMATTED_VALUE = \"FORMATTED_VALUE\",\r\n  UNFORMATTED_VALUE = \"UNFORMATTED_VALUE\",\r\n  FORMULA = \"FORMULA\",\r\n}\r\n\r\nenum DateTimeRenderOption {\r\n  FORMATTED_STRING = \"FORMATTED_STRING\",\r\n  SERIAL_NUMBER = \"SERIAL_NUMBER\",\r\n}\r\n","import {\r\n  GQueryReadOptions,\r\n  readImplementation,\r\n  readManyImplementation,\r\n} from \"./read\";\r\n\r\nexport class GQuery {\r\n  spreadsheetId: string;\r\n\r\n  constructor(spreadsheetId?: string) {\r\n    this.spreadsheetId = spreadsheetId\r\n      ? spreadsheetId\r\n      : SpreadsheetApp.getActiveSpreadsheet().getId();\r\n  }\r\n\r\n  //   create(sheetName: string, data: any[]) {\r\n  //     // TODO:\r\n  //   }\r\n\r\n  read(sheetName: string, options?: GQueryReadOptions) {\r\n    return readImplementation(this.spreadsheetId, sheetName, options);\r\n  }\r\n\r\n  readMany(sheetNames: string[], options?: GQueryReadOptions) {\r\n    return readManyImplementation(this.spreadsheetId, sheetNames, options);\r\n  }\r\n}\r\n\r\nexport type GQueryFilter = (row: any) => boolean;\r\n"],"names":[],"mappings":"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"}