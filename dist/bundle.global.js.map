{"version":3,"file":"bundle.global.js","sources":["../src/ratelimit.ts","../src/types.ts","../src/utils.ts","../src/get.ts","../src/update.ts","../src/append.ts","../src/delete.ts","../src/index.ts"],"sourcesContent":["export function callHandler<T>(fn: () => T, retries: number = 16): T {\r\n  let attempt = 0;\r\n\r\n  while (attempt < retries) {\r\n    try {\r\n      return fn();\r\n    } catch (error) {\r\n      if (\r\n        error.message.includes(\"429\") ||\r\n        error.message.includes(\"Quota exceeded for quota metric\")\r\n      ) {\r\n        attempt++;\r\n        const backoffDelay = Math.min(\r\n          Math.pow(2, attempt) + Math.random() * 1000,\r\n          64000\r\n        );\r\n        Utilities.sleep(backoffDelay);\r\n      } else {\r\n        throw error; // Rethrow if it's not a rate limit error\r\n      }\r\n    }\r\n  }\r\n\r\n  throw new Error(\"Max retries reached for Google Sheets API call.\");\r\n}\r\n","export type GQueryReadOptions = {\r\n  valueRenderOption?: ValueRenderOption;\r\n  dateTimeRenderOption?: DateTimeRenderOption;\r\n};\r\nexport type GQueryResult = {\r\n  rows: GQueryRow[];\r\n  headers: string[];\r\n};\r\nexport type GQueryRow = Record<string, any> & {\r\n  __meta: {\r\n    rowNum: number;\r\n    colLength: number;\r\n  };\r\n};\r\nexport enum ValueRenderOption {\r\n  FORMATTED_VALUE = \"FORMATTED_VALUE\",\r\n  UNFORMATTED_VALUE = \"UNFORMATTED_VALUE\",\r\n  FORMULA = \"FORMULA\",\r\n}\r\nexport enum DateTimeRenderOption {\r\n  FORMATTED_STRING = \"FORMATTED_STRING\",\r\n  SERIAL_NUMBER = \"SERIAL_NUMBER\",\r\n}\r\n","import { callHandler } from \"./ratelimit\";\r\nimport { GQueryRow } from \"./types\";\r\n\r\nexport function parseRows(\r\n  headers: string[],\r\n  values: any[][]\r\n): GQueryRow[] {\r\n  return values.map((row, rowIndex) => {\r\n    const obj: GQueryRow = {\r\n      __meta: {\r\n        rowNum: rowIndex + 2, // +2 because header row is 1\r\n        colLength: headers.length,\r\n      },\r\n    } as GQueryRow;\r\n\r\n    headers.forEach((header: string, i: number) => {\r\n      obj[header] = row[i] !== undefined ? row[i] : \"\";\r\n    });\r\n\r\n    return obj;\r\n  });\r\n}\r\n\r\nexport function fetchSheetData(\r\n  spreadsheetId: string,\r\n  sheetName: string\r\n): { headers: string[]; rows: GQueryRow[] } {\r\n  const response = callHandler(() =>\r\n    Sheets.Spreadsheets.Values.get(spreadsheetId, sheetName)\r\n  );\r\n  const values = response.values || [];\r\n\r\n  if (values.length === 0) {\r\n    return { headers: [], rows: [] };\r\n  }\r\n\r\n  const headers = values[0].map((h: any) => String(h));\r\n  const rows = parseRows(headers, values.slice(1));\r\n\r\n  return { headers, rows };\r\n}\r\n","import { GQuery, GQueryTable, GQueryTableFactory } from \"./index\";\r\nimport { callHandler } from \"./ratelimit\";\r\nimport {\r\n  GQueryReadOptions,\r\n  GQueryResult,\r\n  ValueRenderOption,\r\n  DateTimeRenderOption,\r\n  GQueryRow,\r\n} from \"./types\";\r\nimport { parseRows } from \"./utils\";\r\n\r\nexport function getManyInternal(\r\n  gquery: GQuery,\r\n  sheetNames: string[],\r\n  options?: GQueryReadOptions\r\n): {\r\n  [sheetName: string]: GQueryResult;\r\n} {\r\n  if (!sheetNames || sheetNames.length === 0) {\r\n    return {};\r\n  }\r\n\r\n  const valueRenderOption =\r\n    options?.valueRenderOption || ValueRenderOption.FORMATTED_VALUE;\r\n  const dateTimeRenderOption =\r\n    options?.dateTimeRenderOption || DateTimeRenderOption.FORMATTED_STRING;\r\n\r\n  const result: { [sheetName: string]: GQueryResult } = {};\r\n\r\n  let sheetMetadata: { [sheetName: string]: { [header: string]: string } } = {};\r\n  try {\r\n    const metadataResponse = callHandler(() =>\r\n      Sheets.Spreadsheets.get(gquery.spreadsheetId, {\r\n        fields: \"sheets(properties(title),tables.columnProperties)\",\r\n      })\r\n    );\r\n\r\n    if (metadataResponse && metadataResponse.sheets) {\r\n      metadataResponse.sheets.forEach((sheet) => {\r\n        const sheetName = sheet.properties?.title;\r\n        if (!sheetName || !sheetNames.includes(sheetName)) return;\r\n\r\n        // @ts-expect-error: tables may not be typed\r\n        if (sheet.tables && sheet.tables.length > 0) {\r\n          // @ts-expect-error\r\n          const table = sheet.tables[0];\r\n          if (table.columnProperties) {\r\n            sheetMetadata[sheetName] = {};\r\n            Object.keys(table.columnProperties).forEach((column) => {\r\n              const dataType = table.columnProperties[column].dataType;\r\n              if (dataType) {\r\n                sheetMetadata[sheetName][column] = dataType;\r\n              }\r\n            });\r\n          }\r\n        }\r\n      });\r\n    }\r\n  } catch (e) {\r\n    console.error(\"Error fetching metadata:\", e);\r\n  }\r\n\r\n  const dataResponse = callHandler(() =>\r\n    Sheets.Spreadsheets.Values.batchGet(gquery.spreadsheetId, {\r\n      ranges: sheetNames.map((s) => `${s}`),\r\n      valueRenderOption,\r\n      dateTimeRenderOption,\r\n    })\r\n  );\r\n\r\n  if (!dataResponse || !dataResponse.valueRanges) {\r\n    sheetNames.forEach((sheet) => {\r\n      result[sheet] = { headers: [], rows: [] };\r\n    });\r\n    return result;\r\n  }\r\n\r\n  dataResponse.valueRanges.forEach((valueRange, index) => {\r\n    const sheetName = sheetNames[index];\r\n\r\n    if (!valueRange.values || valueRange.values.length === 0) {\r\n      result[sheetName] = { headers: [], rows: [] };\r\n      return;\r\n    }\r\n\r\n    const headers = valueRange.values[0].map((h) => String(h));\r\n    let rows = parseRows(headers, valueRange.values.slice(1));\r\n    const columnTypes = sheetMetadata[sheetName] || {};\r\n\r\n    rows = rows.map((row) => {\r\n      const newRow: GQueryRow = { __meta: row.__meta };\r\n      headers.forEach((header) => {\r\n        let value = row[header];\r\n        if (value !== undefined && value !== null && value !== \"\") {\r\n          if (columnTypes[header]) {\r\n            const dataType = columnTypes[header];\r\n            if (dataType === \"BOOLEAN\") {\r\n              if (typeof value === \"string\") {\r\n                value = value.toLowerCase() === \"true\";\r\n              }\r\n            } else if (dataType === \"DATE_TIME\") {\r\n              const dateValue = new Date(value);\r\n              if (!isNaN(dateValue.getTime())) {\r\n                value = dateValue;\r\n              }\r\n            } else if (dataType === \"NUMBER\") {\r\n              const numValue = Number(value);\r\n              if (!isNaN(numValue)) {\r\n                value = numValue;\r\n              }\r\n            }\r\n          } else if (typeof value === \"string\") {\r\n            if (\r\n              value.toLowerCase() === \"true\" ||\r\n              value.toLowerCase() === \"false\"\r\n            ) {\r\n              value = value.toLowerCase() === \"true\";\r\n            } else if (\r\n              /^\\d{1,2}\\/\\d{1,2}\\/\\d{4}(\\s\\d{1,2}:\\d{1,2}(:\\d{1,2})?)?$/.test(\r\n                value\r\n              )\r\n            ) {\r\n              const dateValue = new Date(value);\r\n              if (!isNaN(dateValue.getTime())) {\r\n                value = dateValue;\r\n              }\r\n            }\r\n          }\r\n        }\r\n        newRow[header] = value;\r\n      });\r\n      return newRow;\r\n    });\r\n\r\n    result[sheetName] = { headers, rows };\r\n  });\r\n\r\n  return result;\r\n}\r\n\r\nexport function getInternal(\r\n  gqueryTableFactory: GQueryTableFactory,\r\n  options?: GQueryReadOptions\r\n): GQueryResult {\r\n  const gqueryTable = gqueryTableFactory.gQueryTable;\r\n  const gquery = gqueryTable.gquery;\r\n  // Determine which sheets we need to read from\r\n  const sheetsToRead = [gqueryTable.sheetName];\r\n\r\n  // Add all join sheets\r\n  if (gqueryTableFactory.joinOption.length > 0) {\r\n    gqueryTableFactory.joinOption.forEach((join) => {\r\n      if (!sheetsToRead.includes(join.sheetName)) {\r\n        sheetsToRead.push(join.sheetName);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Read data from all required sheets at once\r\n  const results = gquery.getMany(sheetsToRead, options);\r\n\r\n  // If the main sheet doesn't exist or has no data\r\n  if (\r\n    !results[gqueryTable.sheetName] ||\r\n    results[gqueryTable.sheetName].rows.length === 0\r\n  ) {\r\n    return { headers: [], rows: [] };\r\n  }\r\n\r\n  // Get data for the primary table\r\n  let result = results[gqueryTable.sheetName];\r\n  let rows = result.rows;\r\n  let headers = result.headers;\r\n\r\n  // Process each join sequentially\r\n  if (gqueryTableFactory.joinOption.length > 0) {\r\n    gqueryTableFactory.joinOption.forEach((joinConfig) => {\r\n      const { sheetName, sheetColumn, joinColumn, columnsToReturn } =\r\n        joinConfig;\r\n\r\n      const joinData = results[sheetName];\r\n\r\n      if (!joinData || !joinData.rows || joinData.rows.length === 0) {\r\n        return; // Skip this join\r\n      }\r\n\r\n      // Create join lookup table\r\n      const joinMap: Record<string, any[]> = {};\r\n\r\n      // Check if the join column exists in the join table\r\n      const joinHeaders = joinData.headers;\r\n      if (!joinHeaders.includes(sheetColumn)) {\r\n        return; // Skip this join\r\n      }\r\n\r\n      joinData.rows.forEach((joinRow) => {\r\n        const joinKey = String(joinRow[sheetColumn]);\r\n        if (!joinMap[joinKey]) {\r\n          joinMap[joinKey] = [];\r\n        }\r\n        joinMap[joinKey].push(joinRow);\r\n      });\r\n\r\n      // Perform the join operation\r\n      rows = rows.map((row) => {\r\n        const localJoinValue = row[joinColumn];\r\n        const joinedRows = joinMap[String(localJoinValue)] || [];\r\n\r\n        // Create joined row with all join table fields\r\n        const joinedRow = { ...row };\r\n\r\n        joinedRows.forEach((joinRow, index) => {\r\n          // Determine which columns to include from join\r\n          const columnsToInclude =\r\n            columnsToReturn ||\r\n            Object.keys(joinRow).filter(\r\n              (key) => key !== \"__meta\" && key !== sheetColumn\r\n            );\r\n\r\n          columnsToInclude.forEach((key) => {\r\n            if (joinRow.hasOwnProperty(key) && key !== \"__meta\") {\r\n              // For multiple joined rows, add suffix _1, _2, etc.\r\n              const suffix = joinedRows.length > 1 ? `_${index + 1}` : \"\";\r\n              const targetKey = key === sheetColumn ? key : `${key}${suffix}`;\r\n              joinedRow[targetKey] = joinRow[key];\r\n            }\r\n          });\r\n        });\r\n\r\n        return joinedRow;\r\n      });\r\n    });\r\n  }\r\n\r\n  // Apply filter if specified\r\n  if (gqueryTableFactory.filterOption) {\r\n    rows = rows.filter(gqueryTableFactory.filterOption);\r\n  }\r\n\r\n  // Apply select if specified\r\n  if (\r\n    gqueryTableFactory.selectOption &&\r\n    gqueryTableFactory.selectOption.length > 0\r\n  ) {\r\n    // Create a map to track columns from joined tables\r\n    const joinedColumns = new Set<string>();\r\n\r\n    // Collect all columns from joined tables\r\n    rows.forEach((row) => {\r\n      Object.keys(row).forEach((key) => {\r\n        // If the column is not in the original headers, it's from a join\r\n        if (!headers.includes(key) && key !== \"__meta\") {\r\n          joinedColumns.add(key);\r\n        }\r\n      });\r\n    });\r\n\r\n    // If we have a select option, determine which columns to keep\r\n    let selectedHeaders: string[];\r\n\r\n    // Check if any of the selected headers is \"Model\" or \"Model_Name\"\r\n    // If we're selecting the join columns, we want to include all related joined fields\r\n    if (\r\n      gqueryTableFactory.selectOption.some(\r\n        (header) =>\r\n          header === \"Model\" ||\r\n          header === \"Model_Name\" ||\r\n          gqueryTableFactory.joinOption.some(\r\n            (j) => j.joinColumn === header || j.sheetColumn === header\r\n          )\r\n      )\r\n    ) {\r\n      // Include all join-related columns and the selected columns\r\n      selectedHeaders = [...gqueryTableFactory.selectOption];\r\n      joinedColumns.forEach((joinCol) => {\r\n        selectedHeaders.push(joinCol);\r\n      });\r\n    } else {\r\n      // Otherwise only include explicitly selected columns\r\n      selectedHeaders = [...gqueryTableFactory.selectOption];\r\n    }\r\n\r\n    // Remove duplicates\r\n    selectedHeaders = [...new Set(selectedHeaders)];\r\n\r\n    // Filter rows to only include selected columns\r\n    rows = rows.map((row) => {\r\n      const selectedRow: GQueryRow = {\r\n        __meta: row.__meta,\r\n      };\r\n\r\n      selectedHeaders.forEach((header) => {\r\n        if (row.hasOwnProperty(header)) {\r\n          selectedRow[header] = row[header];\r\n        }\r\n      });\r\n\r\n      return selectedRow;\r\n    });\r\n\r\n    // Update headers to include both selected and joined columns\r\n    return {\r\n      headers: selectedHeaders,\r\n      rows,\r\n    };\r\n  }\r\n\r\n  return {\r\n    headers,\r\n    rows,\r\n  };\r\n}\r\n\r\nexport function queryInternal(\r\n  gqueryTable: GQueryTable,\r\n  query: string\r\n): GQueryResult {\r\n  var sheet = gqueryTable.sheet;\r\n  var range = sheet.getDataRange();\r\n  var replaced = query;\r\n  for (var i = 0; i < range.getLastColumn() - 1; i++) {\r\n    var rng = sheet.getRange(1, i + 1);\r\n\r\n    var name = rng.getValue();\r\n    var letter = rng.getA1Notation().match(/([A-Z]+)/)[0];\r\n    replaced = replaced.replaceAll(name, letter);\r\n  }\r\n\r\n  var response = UrlFetchApp.fetch(\r\n    Utilities.formatString(\r\n      \"https://docs.google.com/spreadsheets/d/%s/gviz/tq?tq=%s%s%s%s\",\r\n      sheet.getParent().getId(),\r\n      encodeURIComponent(replaced),\r\n      \"&sheet=\" + sheet.getName(),\r\n      typeof range === \"string\" ? \"&range=\" + range : \"\",\r\n      \"&headers=1\"\r\n    ),\r\n    {\r\n      headers: {\r\n        Authorization: \"Bearer \" + ScriptApp.getOAuthToken(),\r\n      },\r\n    }\r\n  );\r\n\r\n  var jsonResponse = JSON.parse(\r\n      response\r\n        .getContentText()\r\n        .replace(\"/*O_o*/\\n\", \"\")\r\n        .replace(/(google\\.visualization\\.Query\\.setResponse\\()|(\\);)/gm, \"\")\r\n    ),\r\n    table = jsonResponse.table;\r\n\r\n  // Extract column headers\r\n  const headers = table.cols.map((col: any) => col.label);\r\n\r\n  // Map rows to proper GQueryRow format\r\n  const rows = table.rows.map((row: any, _rowIndex: number) => {\r\n    const rowObj: GQueryRow = {\r\n      __meta: {\r\n        rowNum: -1, // +2 because we're starting from index 0 and row 1 is headers\r\n        colLength: row.c.length,\r\n      },\r\n    };\r\n\r\n    // Initialize all header fields to empty strings\r\n    headers.forEach((header: string) => {\r\n      rowObj[header] = \"\";\r\n    });\r\n\r\n    // Populate row data\r\n    table.cols.forEach((col: any, colIndex: number) => {\r\n      const cellData = row.c[colIndex];\r\n      if (cellData) {\r\n        // Use formatted value if available, otherwise use raw value\r\n        let value =\r\n          cellData.f !== null && cellData.f !== undefined\r\n            ? cellData.f\r\n            : cellData.v;\r\n\r\n        // Convert known data types\r\n        if (value instanceof Date) {\r\n          // Keep as Date object\r\n        } else if (typeof value === \"string\") {\r\n          // Try to auto-detect date strings\r\n          if (\r\n            /^\\d{1,2}\\/\\d{1,2}\\/\\d{4}(\\s\\d{1,2}:\\d{1,2}(:\\d{1,2})?)?$/.test(\r\n              value\r\n            )\r\n          ) {\r\n            try {\r\n              const dateValue = new Date(value);\r\n              if (!isNaN(dateValue.getTime())) {\r\n                value = dateValue;\r\n              }\r\n            } catch (e) {\r\n              // Keep as string if conversion fails\r\n            }\r\n          }\r\n        }\r\n\r\n        rowObj[col.label] = value;\r\n      }\r\n    });\r\n\r\n    return rowObj;\r\n  });\r\n\r\n  // Return in the standard GQueryResult format\r\n  return {\r\n    headers: headers,\r\n    rows: rows,\r\n  };\r\n}\r\n","import { GQueryTableFactory } from \"./index\";\r\nimport { callHandler } from \"./ratelimit\";\r\nimport { GQueryResult, GQueryRow } from \"./types\";\r\nimport { fetchSheetData } from \"./utils\";\r\n\r\nexport function updateInternal(\r\n  gQueryTableFactory: GQueryTableFactory,\r\n  updateFn: (row: Record<string, any>) => Record<string, any>\r\n): GQueryResult {\r\n  const spreadsheetId = gQueryTableFactory.gQueryTable.spreadsheetId;\r\n  const sheetName = gQueryTableFactory.gQueryTable.sheetName;\r\n  const range = sheetName;\r\n\r\n  const { headers, rows } = fetchSheetData(spreadsheetId, range);\r\n\r\n  if (headers.length === 0) {\r\n    return { rows: [], headers: [] };\r\n  }\r\n\r\n  const filteredRows = gQueryTableFactory.filterOption\r\n    ? rows.filter((row) => {\r\n        try {\r\n          return gQueryTableFactory.filterOption!(row);\r\n        } catch (error) {\r\n          console.error(\"Error filtering row:\", error);\r\n          return false;\r\n        }\r\n      })\r\n    : rows;\r\n\r\n  const updatedRows: GQueryRow[] = filteredRows.map((row) => {\r\n    const updatedRow: GQueryRow = { ...row };\r\n    try {\r\n      // Allow the updateFn to mutate the provided row object directly or\r\n      // return a partial set of properties to merge.\r\n      const result = updateFn(updatedRow);\r\n      if (result && typeof result === \"object\") {\r\n        Object.assign(updatedRow, result);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error updating row:\", error);\r\n    }\r\n    return updatedRow;\r\n  });\r\n\r\n  const changedCells = new Map<string, any[]>();\r\n\r\n  updatedRows.forEach((updatedRow) => {\r\n    const rowIndex = updatedRow.__meta.rowNum - 2;\r\n    const originalRow = rows[rowIndex];\r\n\r\n    headers.forEach((header, columnIndex) => {\r\n      let updatedValue = updatedRow[header];\r\n\r\n      if (updatedValue instanceof Date) {\r\n        updatedValue = updatedValue.toLocaleString();\r\n      }\r\n\r\n      if (originalRow[header] === updatedValue) return;\r\n\r\n      if (updatedValue !== undefined && updatedValue !== null) {\r\n        const columnLetter = getColumnLetter(columnIndex);\r\n        const cellRange = `${sheetName}!${columnLetter}${updatedRow.__meta.rowNum}`;\r\n        changedCells.set(cellRange, [[updatedValue]]);\r\n      } else if (\r\n        originalRow[header] === undefined ||\r\n        originalRow[header] === null\r\n      ) {\r\n        const columnLetter = getColumnLetter(columnIndex);\r\n        const cellRange = `${sheetName}!${columnLetter}${updatedRow.__meta.rowNum}`;\r\n        changedCells.set(cellRange, [[updatedValue || \"\"]]);\r\n      }\r\n    });\r\n  });\r\n\r\n  if (changedCells.size > 0) {\r\n    const optimizedUpdates = optimizeRanges(changedCells);\r\n\r\n    const batchUpdateRequest = {\r\n      data: optimizedUpdates,\r\n      valueInputOption: \"USER_ENTERED\",\r\n    };\r\n\r\n    callHandler(() =>\r\n      Sheets.Spreadsheets.Values.batchUpdate(batchUpdateRequest, spreadsheetId)\r\n    );\r\n  }\r\n\r\n  return {\r\n    rows: filteredRows.length > 0 ? updatedRows : [],\r\n    headers,\r\n  };\r\n}\r\n\r\n/**\r\n * Convert column index to column letter (0 -> A, 1 -> B, etc.)\r\n */\r\nfunction getColumnLetter(columnIndex: number): string {\r\n  let columnLetter = \"\";\r\n  let index = columnIndex;\r\n\r\n  while (index >= 0) {\r\n    columnLetter = String.fromCharCode(65 + (index % 26)) + columnLetter;\r\n    index = Math.floor(index / 26) - 1;\r\n  }\r\n\r\n  return columnLetter;\r\n}\r\n\r\n/**\r\n * Optimize update ranges by combining adjacent cells in the same column\r\n * into contiguous row segments.\r\n */\r\nfunction optimizeRanges(\r\n  changedCells: Map<string, any[]>\r\n): { range: string; values: any[][] }[] {\r\n  const columnGroups = new Map<string, Map<number, any>>();\r\n\r\n  for (const [cellRange, value] of changedCells.entries()) {\r\n    const matches = cellRange.match(/([^!]+)!([A-Z]+)(\\d+)$/);\r\n    if (!matches) continue;\r\n\r\n    const sheet = matches[1];\r\n    const columnLetter = matches[2];\r\n    const rowNumber = parseInt(matches[3], 10);\r\n    const columnKey = `${sheet}!${columnLetter}`;\r\n\r\n    if (!columnGroups.has(columnKey)) {\r\n      columnGroups.set(columnKey, new Map());\r\n    }\r\n    columnGroups.get(columnKey)!.set(rowNumber, value[0][0]);\r\n  }\r\n\r\n  const optimizedUpdates: { range: string; values: any[][] }[] = [];\r\n\r\n  for (const [columnKey, rowsMap] of columnGroups.entries()) {\r\n    const rowNumbers = Array.from(rowsMap.keys()).sort((a, b) => a - b);\r\n    if (rowNumbers.length === 0) continue;\r\n\r\n    const [sheet, column] = columnKey.split(\"!\");\r\n\r\n    let start = rowNumbers[0];\r\n    let groupValues: any[][] = [[rowsMap.get(start)]];\r\n\r\n    for (let i = 1; i < rowNumbers.length; i++) {\r\n      const rowNum = rowNumbers[i];\r\n      const prev = rowNumbers[i - 1];\r\n      if (rowNum === prev + 1) {\r\n        groupValues.push([rowsMap.get(rowNum)]);\r\n      } else {\r\n        const end = prev;\r\n        const rangeKey =\r\n          start === end\r\n            ? `${sheet}!${column}${start}`\r\n            : `${sheet}!${column}${start}:${column}${end}`;\r\n        optimizedUpdates.push({ range: rangeKey, values: groupValues });\r\n        start = rowNum;\r\n        groupValues = [[rowsMap.get(rowNum)]];\r\n      }\r\n    }\r\n\r\n    const last = rowNumbers[rowNumbers.length - 1];\r\n    const rangeKey =\r\n      start === last\r\n        ? `${sheet}!${column}${start}`\r\n        : `${sheet}!${column}${start}:${column}${last}`;\r\n    optimizedUpdates.push({ range: rangeKey, values: groupValues });\r\n  }\r\n\r\n  return optimizedUpdates;\r\n}\r\n","import { GQueryTable } from \"./index\";\r\nimport { callHandler } from \"./ratelimit\";\r\nimport { GQueryResult, GQueryRow } from \"./types\";\r\n\r\nexport function appendInternal(\r\n  table: GQueryTable,\r\n  data: { [key: string]: any }[]\r\n): GQueryResult {\r\n  // If no data is provided or empty array, return empty result\r\n  if (!data || data.length === 0) {\r\n    return { rows: [], headers: [] };\r\n  }\r\n\r\n  // Extract spreadsheet information\r\n  const spreadsheetId = table.spreadsheetId;\r\n  const sheetName = table.sheetName;\r\n\r\n  // First, get the current headers from the sheet\r\n  const response = callHandler(() =>\r\n    Sheets.Spreadsheets.Values.get(spreadsheetId, `${sheetName}!1:1`)\r\n  );\r\n\r\n  // If sheet is empty or doesn't exist, cannot append\r\n  if (!response || !response.values || response.values.length === 0) {\r\n    throw new Error(`Sheet \"${sheetName}\" not found or has no headers`);\r\n  }\r\n\r\n  const headers = response.values[0].map((header) => String(header));\r\n\r\n  // Format data to be appended according to the sheet's headers\r\n  const rowsToAppend = data.map((item) => {\r\n    // For each header, get corresponding value from item or empty string\r\n    return headers.map((header) => {\r\n      let value = item[header];\r\n\r\n      // Convert Date objects to strings\r\n      if (value instanceof Date) {\r\n        value = value.toLocaleString();\r\n      }\r\n\r\n      return value !== undefined ? value : \"\";\r\n    });\r\n  });\r\n\r\n  // Use Sheets API to append the data\r\n  const appendResponse = callHandler(() =>\r\n    Sheets.Spreadsheets.Values.append(\r\n      { values: rowsToAppend },\r\n      spreadsheetId,\r\n      `${sheetName}`,\r\n      {\r\n        valueInputOption: \"USER_ENTERED\",\r\n        insertDataOption: \"OVERWRITE\",\r\n        responseValueRenderOption: \"FORMATTED_VALUE\",\r\n        responseDateTimeRenderOption: \"FORMATTED_STRING\",\r\n        includeValuesInResponse: true,\r\n      }\r\n    )\r\n  );\r\n\r\n  // Check if append was successful\r\n  if (\r\n    !appendResponse ||\r\n    !appendResponse.updates ||\r\n    !appendResponse.updates.updatedRange\r\n  ) {\r\n    throw new Error(\"Failed to append data to sheet\");\r\n  }\r\n\r\n  // Extract information about the appended rows\r\n  const updatedRange = appendResponse.updates.updatedRange;\r\n  const rangeMatch = updatedRange.match(/([^!]+)!([A-Z]+)(\\d+):([A-Z]+)(\\d+)/);\r\n\r\n  if (!rangeMatch) {\r\n    throw new Error(`Could not parse updated range: ${updatedRange}`);\r\n  }\r\n\r\n  // Get start and end row numbers from the updated range\r\n  const startRow = parseInt(rangeMatch[3]);\r\n  const endRow = parseInt(rangeMatch[5]);\r\n\r\n  // Create result rows with metadata\r\n  const resultRows: GQueryRow[] = rowsToAppend.map((row, index) => {\r\n    const rowObj: GQueryRow = {\r\n      __meta: {\r\n        rowNum: startRow + index,\r\n        colLength: headers.length,\r\n      },\r\n    };\r\n\r\n    // Add data according to headers\r\n    headers.forEach((header, colIndex) => {\r\n      rowObj[header] = row[colIndex];\r\n    });\r\n\r\n    return rowObj;\r\n  });\r\n\r\n  return {\r\n    rows: resultRows,\r\n    headers: headers,\r\n  };\r\n}\r\n","import { GQueryTableFactory } from \"./index\";\r\nimport { callHandler } from \"./ratelimit\";\r\nimport { fetchSheetData } from \"./utils\";\r\n\r\nexport function deleteInternal(gqueryTableFactory: GQueryTableFactory): {\r\n  deletedRows: number;\r\n} {\r\n  // Get table configuration\r\n  const spreadsheetId = gqueryTableFactory.gQueryTable.spreadsheetId;\r\n  const sheetName = gqueryTableFactory.gQueryTable.sheetName;\r\n  const sheet = gqueryTableFactory.gQueryTable.sheet;\r\n  const sheetId = sheet.getSheetId();\r\n\r\n  const { rows } = fetchSheetData(spreadsheetId, sheetName);\r\n\r\n  if (!gqueryTableFactory.filterOption || rows.length === 0) {\r\n    return { deletedRows: 0 };\r\n  }\r\n\r\n  // Find rows matching the filter condition (these will be deleted)\r\n  const rowsToDelete = rows.filter((row) => {\r\n    try {\r\n      return gqueryTableFactory.filterOption(row);\r\n    } catch (error) {\r\n      console.error(\"Error filtering row:\", error);\r\n      return false;\r\n    }\r\n  });\r\n\r\n  if (rowsToDelete.length === 0) {\r\n    return { deletedRows: 0 };\r\n  }\r\n\r\n  // Sort rowsToDelete by row number in descending order to avoid shifting issues\r\n  rowsToDelete.sort((a, b) => b.__meta.rowNum - a.__meta.rowNum);\r\n\r\n  // Create an array of row indices to delete\r\n  const rowIndicesToDelete = rowsToDelete.map((row) => row.__meta.rowNum);\r\n\r\n  // Create batch update request for deleting the rows\r\n  const batchUpdateRequest = {\r\n    requests: rowIndicesToDelete.map((rowIndex) => ({\r\n      deleteDimension: {\r\n        range: {\r\n          sheetId: sheetId,\r\n          dimension: \"ROWS\",\r\n          startIndex: rowIndex - 1, // Convert to 0-based index\r\n          endIndex: rowIndex, // Range is end-exclusive\r\n        },\r\n      },\r\n    })),\r\n  };\r\n\r\n  // Execute the batch update\r\n  try {\r\n    callHandler(() =>\r\n      Sheets.Spreadsheets.batchUpdate(batchUpdateRequest, spreadsheetId)\r\n    );\r\n  } catch (error) {\r\n    console.error(\"Error deleting rows:\", error);\r\n    return { deletedRows: 0 };\r\n  }\r\n\r\n  return { deletedRows: rowsToDelete.length };\r\n}\r\n","import { getInternal, getManyInternal, queryInternal } from \"./get\";\r\nimport { updateInternal } from \"./update\";\r\nimport { appendInternal } from \"./append\";\r\nimport { deleteInternal } from \"./delete\";\r\nimport { GQueryReadOptions, GQueryResult } from \"./types\";\r\n\r\nexport * from \"./types\";\r\n\r\nexport class GQuery {\r\n  spreadsheetId: string;\r\n\r\n  constructor(spreadsheetId?: string) {\r\n    this.spreadsheetId = spreadsheetId\r\n      ? spreadsheetId\r\n      : SpreadsheetApp.getActiveSpreadsheet().getId();\r\n  }\r\n\r\n  from(sheetName: string): GQueryTable {\r\n    return new GQueryTable(this, this.spreadsheetId, sheetName);\r\n  }\r\n\r\n  getMany(\r\n    sheetNames: string[],\r\n    options?: GQueryReadOptions\r\n  ): {\r\n    [sheetName: string]: GQueryResult;\r\n  } {\r\n    return getManyInternal(this, sheetNames, options);\r\n  }\r\n}\r\n\r\nexport class GQueryTable {\r\n  gquery: GQuery;\r\n  spreadsheetId: string;\r\n  spreadsheet: GoogleAppsScript.Spreadsheet.Spreadsheet;\r\n  sheetName: string;\r\n  sheet: GoogleAppsScript.Spreadsheet.Sheet;\r\n\r\n  constructor(gquery: GQuery, spreadsheetId: string, sheetName: string) {\r\n    this.spreadsheetId = spreadsheetId;\r\n    this.sheetName = sheetName;\r\n    this.spreadsheet = SpreadsheetApp.openById(spreadsheetId);\r\n    this.sheet = this.spreadsheet.getSheetByName(sheetName);\r\n    this.gquery = gquery;\r\n  }\r\n\r\n  select(headers: string[]): GQueryTableFactory {\r\n    return new GQueryTableFactory(this).select(headers);\r\n  }\r\n\r\n  where(filterFn: (row: any) => boolean): GQueryTableFactory {\r\n    return new GQueryTableFactory(this).where(filterFn);\r\n  }\r\n\r\n  join(\r\n    sheetName: string,\r\n    sheetColumn: string,\r\n    joinColumn: string,\r\n    columnsToReturn?: string[]\r\n  ): GQueryTableFactory {\r\n    return new GQueryTableFactory(this).join(\r\n      sheetName,\r\n      sheetColumn,\r\n      joinColumn,\r\n      columnsToReturn\r\n    );\r\n  }\r\n\r\n  update(\r\n    updateFn: (row: Record<string, any>) => Record<string, any>\r\n  ): GQueryResult {\r\n    return new GQueryTableFactory(this).update(updateFn);\r\n  }\r\n\r\n  append(\r\n    data: { [key: string]: any }[] | { [key: string]: any }\r\n  ): GQueryResult {\r\n    // Handle single object by wrapping it in an array\r\n    const dataArray = Array.isArray(data) ? data : [data];\r\n    return appendInternal(this, dataArray);\r\n  }\r\n\r\n  get(options?: GQueryReadOptions): GQueryResult {\r\n    return new GQueryTableFactory(this).get(options);\r\n  }\r\n\r\n  query(query: string): GQueryResult {\r\n    return queryInternal(this, query);\r\n  }\r\n\r\n  delete(): { deletedRows: number } {\r\n    return new GQueryTableFactory(this).delete();\r\n  }\r\n}\r\n\r\nexport class GQueryTableFactory {\r\n  gQueryTable: GQueryTable;\r\n  selectOption?: string[];\r\n  filterOption?: (row: any) => boolean;\r\n  joinOption: {\r\n    sheetName: string;\r\n    sheetColumn: string;\r\n    joinColumn: string;\r\n    columnsToReturn?: string[];\r\n  }[] = [];\r\n\r\n  constructor(GQueryTable: GQueryTable) {\r\n    this.gQueryTable = GQueryTable;\r\n  }\r\n\r\n  select(headers: string[]): GQueryTableFactory {\r\n    this.selectOption = headers;\r\n    return this;\r\n  }\r\n\r\n  where(filterFn: (row: any) => boolean): GQueryTableFactory {\r\n    this.filterOption = filterFn;\r\n    return this;\r\n  }\r\n\r\n  join(\r\n    sheetName: string,\r\n    sheetColumn: string,\r\n    joinColumn: string,\r\n    columnsToReturn?: string[]\r\n  ): GQueryTableFactory {\r\n    this.joinOption.push({\r\n      sheetName,\r\n      sheetColumn,\r\n      joinColumn,\r\n      columnsToReturn,\r\n    });\r\n    return this;\r\n  }\r\n\r\n  get(options?: GQueryReadOptions): GQueryResult {\r\n    return getInternal(this, options);\r\n  }\r\n\r\n  update(\r\n    updateFn: (row: Record<string, any>) => Record<string, any>\r\n  ): GQueryResult {\r\n    return updateInternal(this, updateFn);\r\n  }\r\n\r\n  append(\r\n    data: { [key: string]: any }[] | { [key: string]: any }\r\n  ): GQueryResult {\r\n    // Handle single object by wrapping it in an array\r\n    const dataArray = Array.isArray(data) ? data : [data];\r\n    return appendInternal(this.gQueryTable, dataArray);\r\n  }\r\n\r\n  delete(): { deletedRows: number } {\r\n    return deleteInternal(this);\r\n  }\r\n}\r\n"],"names":["ValueRenderOption","DateTimeRenderOption"],"mappings":"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"}