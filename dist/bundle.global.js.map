{"version":3,"file":"bundle.global.js","sources":["../src/read.ts","../src/index.ts"],"sourcesContent":["import { GQueryFilter, Row } from \"./index\";\r\n\r\nexport function readImplementation(\r\n  spreadsheetId: string,\r\n  sheetName: string,\r\n  options: GQueryReadOptions = {\r\n    dateTimeRenderOption: DateTimeRenderOption.FORMATTED_STRING,\r\n    valueRenderOption: ValueRenderOption.FORMATTED_VALUE,\r\n  }\r\n): GQueryReadData {\r\n  var sheets = [sheetName];\r\n  if (options?.join) {\r\n    sheets = [...new Set([...sheets, ...Object.keys(options.join)])];\r\n  }\r\n\r\n  const optionsWithoutFilterJoin = {\r\n    valueRenderOption: options.valueRenderOption,\r\n    dateTimeRenderOption: options.dateTimeRenderOption,\r\n  };\r\n\r\n  const allSheetData = readManyImplementation(\r\n    spreadsheetId,\r\n    sheets,\r\n    optionsWithoutFilterJoin\r\n  );\r\n\r\n  // Get the main sheet data\r\n  let mainData = allSheetData[sheetName];\r\n\r\n  // Apply filter if provided\r\n  if (options?.filter) {\r\n    mainData = {\r\n      headers: mainData.headers,\r\n      values: mainData.values.filter((row) => options.filter!(row)),\r\n    };\r\n  }\r\n\r\n  // Apply join if provided\r\n  if (options?.join && Object.keys(options.join).length > 0) {\r\n    const joinedData = applyJoin(\r\n      mainData,\r\n      allSheetData,\r\n      Array.isArray(sheetName) ? sheetName[0] : sheetName,\r\n      options.join\r\n    );\r\n    return joinedData;\r\n  }\r\n\r\n  return mainData;\r\n}\r\n\r\nexport function readManyImplementation(\r\n  spreadsheetId: string,\r\n  sheetNames: string[],\r\n  options: GQueryReadOptions = {\r\n    dateTimeRenderOption: DateTimeRenderOption.FORMATTED_STRING,\r\n    valueRenderOption: ValueRenderOption.FORMATTED_VALUE,\r\n  }\r\n): Record<string, GQueryReadData> {\r\n  if (options.filter || options.join) {\r\n    throw new Error(\r\n      \"Filter and join options are not supported in readManyImplementation.\"\r\n    );\r\n  }\r\n  // Get sheet data using the Sheets API batchGet method\r\n  const batchResponse = Sheets?.Spreadsheets?.Values?.batchGet?.(\r\n    spreadsheetId,\r\n    {\r\n      ranges: sheetNames,\r\n      valueRenderOption: options?.valueRenderOption,\r\n      dateTimeRenderOption: options?.dateTimeRenderOption,\r\n    }\r\n  );\r\n\r\n  // Process the response into the expected format\r\n  const response: Record<string, { headers: string[]; rows: any[][] }> = {};\r\n\r\n  if (batchResponse && batchResponse.valueRanges) {\r\n    batchResponse.valueRanges.forEach((valueRange, index) => {\r\n      const currentSheet = sheetNames[index];\r\n      if (valueRange.values && valueRange.values.length > 0) {\r\n        response[currentSheet] = {\r\n          headers: valueRange.values[0],\r\n          rows: valueRange.values.slice(1).filter((row) => row.length > 0), // Filter out empty rows\r\n        };\r\n      } else {\r\n        response[currentSheet] = { headers: [], rows: [] };\r\n      }\r\n    });\r\n  }\r\n  return sheetNames.reduce<Record<string, GQueryReadData>>((acc, sheetName) => {\r\n    const sheetData = response[sheetName];\r\n    acc[sheetName] = processSheetData(sheetData);\r\n    return acc;\r\n  }, {});\r\n}\r\n\r\n// Helper function to process raw sheet data into rows with header keys\r\nfunction processSheetData(sheetData: {\r\n  headers: string[];\r\n  rows: any[][];\r\n}): GQueryReadData {\r\n  if (!sheetData) {\r\n    return { headers: [], values: [] };\r\n  }\r\n\r\n  const { headers, rows } = sheetData;\r\n  const values = rows.map((row, rowIndex) => {\r\n    const obj = row.reduce<Record<string, any>>((acc, cellValue, index) => {\r\n      acc[headers[index]] = cellValue;\r\n      return acc;\r\n    }, {} as Record<string, any>);\r\n    // Attach __meta property as required by Row type\r\n    (obj as Row).__meta = {\r\n      rowNum: rowIndex + 2, // +2 because headers are row 1, and rows is 0-based\r\n      colLength: row.length,\r\n    };\r\n    return obj as Row;\r\n  });\r\n\r\n  return { headers, values };\r\n}\r\n\r\n// Helper function to apply join operations\r\nfunction applyJoin(\r\n  mainData: GQueryReadData,\r\n  allSheetData: Record<string, GQueryReadData>,\r\n  mainSheetName: string,\r\n  join: Record<string, GQueryReadJoin>\r\n): GQueryReadData {\r\n  // Create result with main data's headers\r\n  const result: GQueryReadData = {\r\n    headers: [...mainData.headers],\r\n    values: [...mainData.values],\r\n  };\r\n\r\n  // Process each main data row\r\n  result.values = mainData.values.map((mainRow) => {\r\n    const enrichedRow = { ...mainRow };\r\n\r\n    // For each joined sheet\r\n    Object.entries(join).forEach(([sheetName, joinConfig]) => {\r\n      if (!allSheetData[sheetName]) return;\r\n\r\n      const sheetData = allSheetData[sheetName];\r\n\r\n      // Find matching rows in the joined sheet\r\n      const matchingRows = sheetData.values.filter((joinRow) => {\r\n        // Check all join conditions defined for this sheet\r\n        const conditions = joinConfig.on;\r\n        if (!conditions) return false;\r\n\r\n        return Object.entries(conditions).every(([mainCol, joinCol]) => {\r\n          return mainRow[mainCol] === joinRow[joinCol];\r\n        });\r\n      });\r\n\r\n      // Add matching data to the main row\r\n      if (matchingRows.length > 0) {\r\n        // If includes is specified, only add those fields\r\n        if (joinConfig.include && joinConfig.include.length > 0) {\r\n          joinConfig.include.forEach((field) => {\r\n            enrichedRow[`${sheetName}_${field}`] = matchingRows[0][field];\r\n          });\r\n        } else {\r\n          // Otherwise add all fields with sheet name prefix to avoid collisions\r\n          Object.entries(matchingRows[0]).forEach(([key, value]) => {\r\n            if (key !== \"__meta\") {\r\n              enrichedRow[`${sheetName}_${key}`] = value;\r\n            }\r\n          });\r\n        }\r\n      }\r\n    });\r\n\r\n    return enrichedRow;\r\n  });\r\n\r\n  // Update headers to include any new fields\r\n  const allKeys = new Set<string>();\r\n  result.values.forEach((row) => {\r\n    Object.keys(row).forEach((key) => {\r\n      if (key !== \"__meta\") {\r\n        allKeys.add(key);\r\n      }\r\n    });\r\n  });\r\n  result.headers = Array.from(allKeys);\r\n\r\n  return result;\r\n}\r\n\r\nexport type GQueryReadJoin = {\r\n  on?: Record<string, string>; // {mainField: joinField}\r\n  include?: string[]; // fields to include\r\n};\r\n\r\nexport type GQueryReadOptions = {\r\n  filter?: GQueryFilter;\r\n  join?: Record<string, GQueryReadJoin>;\r\n  valueRenderOption?: ValueRenderOption;\r\n  dateTimeRenderOption?: DateTimeRenderOption;\r\n};\r\n\r\nexport type GQueryReadData = {\r\n  headers: string[];\r\n  values: Row[];\r\n};\r\n\r\nenum ValueRenderOption {\r\n  FORMATTED_VALUE = \"FORMATTED_VALUE\",\r\n  UNFORMATTED_VALUE = \"UNFORMATTED_VALUE\",\r\n  FORMULA = \"FORMULA\",\r\n}\r\n\r\nenum DateTimeRenderOption {\r\n  FORMATTED_STRING = \"FORMATTED_STRING\",\r\n  SERIAL_NUMBER = \"SERIAL_NUMBER\",\r\n}\r\n","import {\r\n  GQueryReadOptions,\r\n  readImplementation,\r\n  readManyImplementation,\r\n} from \"./read\";\r\n\r\nexport class GQuery {\r\n  spreadsheetId: string;\r\n\r\n  constructor(spreadsheetId?: string) {\r\n    this.spreadsheetId = spreadsheetId\r\n      ? spreadsheetId\r\n      : SpreadsheetApp.getActiveSpreadsheet().getId();\r\n  }\r\n\r\n  //   create(sheetName: string, data: any[]) {\r\n  //     // TODO:\r\n  //   }\r\n\r\n  read(sheetName: string, options?: GQueryReadOptions) {\r\n    return readImplementation(this.spreadsheetId, sheetName, options);\r\n  }\r\n\r\n  readMany(sheetNames: string[], options?: GQueryReadOptions) {\r\n    return readManyImplementation(this.spreadsheetId, sheetNames, options);\r\n  }\r\n\r\n  update(sheetName: string, data: Row[]) {}\r\n}\r\n\r\nexport type GQueryFilter = (row: any) => boolean;\r\n\r\nexport type Row = Record<string, any> & {\r\n  __meta: {\r\n    rowNum: number;\r\n    colLength: number;\r\n  };\r\n};\r\n"],"names":[],"mappings":"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"}